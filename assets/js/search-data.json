{
  
    
        "post0": {
            "title": "Title",
            "content": "%%js console.log(&quot;song object&quot;); class Song { constructor(name, tID, rID, role=&quot;song&quot;) { this.name = name; this.tID = tID; this.rID = rID; this.role = role; } setRole(role) { this.role = role; } getJSON() { const obj = {type: typeof this, name: this.name, tID: this.tID, rID: this.rID, role: this.role}; const json = JSON.stringify(obj); return json; } logIt() { //song Object console.info(this); //Log to Jupyter element.append(&quot;song json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } class album { constructor(singer, songs) { this.singer = singer; this.songs = songs; this.album = [singer, ...songs]; // ... spread option this.json = &#39;{&quot;album&quot;:[&#39; + this.album.map(song =&gt; person.getJSON()) + &#39;]}&#39;; } logIt() { console.log(this); element.append(&quot;album object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); //alert(this.json); } } class Person { constructor(name, genre, role=&quot;singer&quot;) { this.name = name; this.genre = genre; this.role = role; } setRole(role) { this.role = role; } getJSON() { const obj = {type: typeof this, name: this.name, genre: this.genre, role: this.role}; const json = JSON.stringify(obj); return json; } logIt() { console.info(this); //Log to Jupter element.append(&quot;person object in JSON &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } function constructStickSeasonalbum() { const singer = new Person(&quot;noah kahan&quot;, &quot;alternative&quot;, &quot;singer&quot;); const songs = [ new Song(&quot;stick season&quot;, &quot;2min&quot;, 6), new Song(&quot;northern attitude&quot;, &quot;3min&quot;, 5), new Song(&quot;new perspective&quot;, &quot;4min&quot;, 2), new Song(&quot;orange juice&quot;, &quot;5min&quot;, 1), new Song(&quot;the view between villages&quot;, &quot;6min&quot;, 3), new Song(&quot;all my love&quot;, &quot;7min&quot;, 4) ]; return new album(singer, songs); // returns object } const stickseason = constructStickSeasonalbum(); stickseason.logIt(); // enable sharing of data across jupyter cells $(&#39;#jsonText&#39;).text(stickseason.json); // posts/embeds/writes co .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/05/22/javasproj.html",
            "relUrl": "/2023/05/22/javasproj.html",
            "date": " • May 22, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "SASS",
            "content": "Why SASS? . SASS is an improvement on CSS in that there are methods of abstraction. It is a stylesheet language that is compiled into CSS, which means that Sass will translate the Sass code you wrote into CSS, which is what your web browser can read. . SASS vs SCSS . As you learn about Sass, you might notice something called Scss. They are basically the same thing except that Scss uses curly braces and semicolons to distinguish between lines. Sass uses indentation and newlines instead. . We will be teaching the Scss syntax because it is more commonly used. . Getting started . A easy way to write SASS and have it preprocessed into CSS is by using a Jekyll powered website, such as GitHub pages or Fastpages. . The first step is to clone a GitHub pages repo, such as this one. . Within the repository, head over to assets/css/, and open style.scss. . This is where you can create your SASS code. . To see your CSS-translated SASS code, head over to _site/assets/css/style.css . Note: You will need to run bundle exec jekyll serve before the _site directory appears. . The first few hundred lines are used to style Github&#39;s theme. Make sure to scroll to the very bottom to see the SASS code that you wrote, which is in the form of CSS. . Nesting . write styling code in a way that looks like html hierarchy- one code block goes inside another (like an if statement inside of a for loop). it can do a few things- . control execution/flow of code | make code more readable by organizing | make more complex code/structure | . Mini-hack . Write out the SASS equivalent for the following CSS code: . .a .b { color: green; } .a .c { color: blue; } . .a { .b { color: green; } . .c { color: blue; } } nest both b and c inside a since they share that attribute . Extend/Inheritance . What are some similarities that the buttons share? What are the differences? they all have different colors, but they are all shaped and sized the same and have the same rounded corners . Take notes here . can create placeholder class that stores code you want to reuse- like a template | you are basically creating a class that inherits properties of previous classes | the new class gains all of the attributes of the old class | . Mixin . Similar to extend because it creates a template for reusing and it can use parameters to style a specific way | more flexible than inheritance and avoids code duplication | . Mini-hack . Write out a mixin in SASS that takes in a color and a font size as the parameter. Within the mixin, set the background color and font color to the color parameter, and set the font size to the font size parameter. Then create a selector that calls the mixin, and pass in a color and font size of your choice as the arguments. . @mixin color-and-size($color, $font-size) { background-color: $color; color: $color; font-size: $font-size; } .my-class { @include color-and-size(#FF5733, 20px); } . Function . invert function can change between light and dark mode (takes rgb value and returns inverted value) | Functions are called by specifying the function name with parenthesis. Inside the parenthesis, you can specify the arguments. | . Import . bring in code from another file | you can use functionality from that code without having to have it in your own code/rewrite it if it is someone elses | also lets you use same style across multiple files without having to copy and paste over and over | . SASS Hacks . Take notes and complete the mini-hacks. (0.9) . | Complete the quiz questions and provide your answers in this notebook. (0.9) . | Use SASS to create something that uses either extend or mixin. (0.9) . | Extra credit: Research other SASS features and blog about what you learned or add to your SASS project with any extra features not covered in this lesson. More points will be given if both are done. . | MULTIPLE CHOICE Qs . b. a scripting language that has many styling operations | a. They are very similar in their function, but their syntax is slightly different | c. CSS takes up more bytes | b. Syntactically Awesome Style Sheets | d. compute | b. extend | b. Directive ### SASS CREATION WITH MIXIN i like gradient colors so here is a mixin thing for gradients in sass | // Define a mixin that creates a gradient background @mixin gradient-background($start-color, $end-color) { background: linear-gradient(to bottom, $start-color, $end-color); } // Use the mixin to create a gradient background on an element .box { width: 200px; height: 200px; @include gradient-background(#ff0000, #00ff00); } . EXTRA NOTES . i researched some additional features of SASS besides the ones mentioned. i picked five more even though there are a lot. . placeholder selectors: SASS allows you to define placeholder selectors with the % symbol, which you can then use with the @extend directive to apply styles to multiple selectors at once. | operators: SASS supports a number of mathematical and logical operators that you can use to manipulate values in your styles. | interpolation: SASS allows you to use string interpolation with the #{} syntax to include variables or expressions in your CSS styles. | media queries: SASS allows you to define media queries within the context of a selector, which makes it easier to write and manage responsive styles. | source maps: SASS supports source maps, which allow you to debug your styles in the browser&#39;s developer tools and see the original SASS source code, rather than the compiled CSS code. | . so obviously i had to make a code segment using one of these... placeholder selectors was at the top, so even though it&#39;s similar to inheritance, i wrote some more button code. . %button { display: inline-block; padding: 10px 20px; background-color: blue; color: white; border-radius: 5px; } .submit-button { @extend %button; } .cancel-button { @extend %button; background-color: red; } . it defines common button sizing and then makes two more buttons that extend those features to them (but the cancel button is red instead as well) .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/05/21/sass-lesson.html",
            "relUrl": "/2023/05/21/sass-lesson.html",
            "date": " • May 21, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Basic JavaScript Knowledge",
            "content": "Variables . - declare JavaScript variables with var, let or const. - If the value of the variable can change, like a total, use let. If the value is set, like prices, use const. Variables can hold any data type. . var x = 5; var y = 6; var z = x + y; z . Data types- there are 8 JS data types. . List a few data types that you already knownumber string boolean . | . 1. String: a series of characters, written with single or double quotes . let text = &quot;Mort&quot;; text . let text2 = &#39;Yeung&#39;; text2 . 2. Number: can be integers or decimals. . - You can also have exponential notation for large/small numbers . 3. Bigint: used to store integer values that are too big to be represented by a normal JS number . - JavaScript integers are only accurate up to 15 digits . let number = 1234567890123456789012345n; let Largenum = BigInt(1234567890123456789012345) let typeLargenum = typeof Largenum; typeLargenum . Largenum . 4. Boolean: true or false, used in conditional testing . Boolean(10 &gt; 9) . Write a boolean statement that outputs true . Boolean(2+2 == 4) . 5. Undefined: a variable without a value, has the value undefined/empty values . let name; name . grade = undefined; . 6. Null: represents the intentional absence of any object value . - variable is empty at the moment and may have a value later . let result; result = Boolean(undefined); console.log(result); // false result = Boolean(null); console.log(result); // false . 7. Symbol: used to represent unique values that can be used as identifiers/keys in objects. . - They are also used to create private properties and methods in classes. - unique and immutable, so they can be used as unique identifiers in objects and classes. - useful for creating constants that can be shared across different parts of your code. . // Create a Symbol const mySymbol = Symbol(); console.log(mySymbol); // expected output: Symbol() . Symbol() . const myObj = { [mySymbol]: &#39;Hello World&#39; }; console.log(myObj[mySymbol]); . Hello World . Edit/add to the code above so that it outputs &quot;Hello World&quot; . 8. Object: an unordered collection of key-value pairs. Each key-value pair is called a property. . - object: written with curly braces {}, name:value pairs - array: written with square brackets, separated by commas . Object . Identify the name/keys in the object below: | Identify the values in the object below: | . keys = name, breed, age, and color values = Elly, rottweiler, 4, and black . const dogs = {name: &quot;Elly&quot;, breed:&quot;Rottweiler&quot;, age:4, color:&quot;black&quot;} dogs . Array . const songs = [&quot;Love Story&quot;, &quot;Blank Space&quot;, &quot;I Knew You Were Trouble&quot;]; songs . Const . - We use const to declare variables whose value can be initialized only at the time of declaration. - Const means that the identifier cannot be reassigned. . const cost1 = 2; const cost2 = 11; let totalCost = cost1 + cost2; totalCost . Conditionals: control behavior, decides whether or not pieces of code can run. . - If: if a condition is true it is used to specify execution for a block of code. - Else: if the same condition is false it specifies the execution for a block of code. - Else If: new test if the first condition is false. . if (10 &gt; 5) { var outcome = &quot;True&quot;; } outcome; . if (&quot;red&quot; === &quot;blue&quot;) { var outcome = &quot;if block&quot;; } else { var outcome = &quot;else block&quot;; } outcome; . let temperature = 54 if (temperature &lt; 70) { cast = &quot;Chilly&quot;; } else if (temperature &lt; 60) { cast = &quot;Cold&quot;; } else { cast = &quot;Warm&quot;; } cast . Create a conditional statement about how you would greet someone based on the time of day. . let time = 2 if (time &lt; 3) { greet = &quot;good afternoon&quot;; } else if (time &lt; 12) { greet = &quot;good morning&quot;; } else { greet = &quot;good evening&quot;; } greet . &#39;good afternoon&#39; . Functions: . - defining: define with function + functionName(parameter) { function code }. It can be unnamed/anonymous can be defined based on a condition. - calling: simply put the function name with a parameter and semicolon, or a function can call itself (recursive) . Iteration: . - for loop: repeats until a specified condition evaluates to false - do...while: repeats until a specified condition evaluates to false - while statement: executes its statements as long as a specified condition evaluates to true - label: provides a statement with an identifier that lets you refer to it later in the code. ex. you can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution - break: used to terminate a loop, switch, or in conjunction with a labeled statement - continue: can be used to restart a while, do-while, for, or label statement - for...in: iterates a specified variable over all the enumerable properties of an object - for...of statement creates a loop Iterating over iterable objects, invoking a custom iteration hook with statements to be executed for the value of each distinct property . JavaScript in HTML- Questions . Where do you store the JavaScript Code? either inline script (set the type as javascript) or external (reference it in the html but its in a dif file) | How do you import a JS file into HTML? external storage as mentioned above- you use &quot;src&quot; and reference the outside file script type=&quot;text/javascript&quot; src=&quot;example.js&quot;&gt;/script like this (i took out two of the &lt;&gt; so it wouldnt show up weird) | What is onClick? it means that the code will run when the user clicks something (button, link, etc) | What tag do you use to write JavaScript code? the script tag | Hacks . Add notes in this notebook | Complete the code portions, questions, and prompts throughout the notebook | Extra Credit: code a small JavaScript game | i was having some trouble making my node.js work, so i decided to just make the code for an actual js file because the readline function wasn&#39;t working . // Generate a random number between 1 and 10 const randomNumber = Math.floor(Math.random() * 10) + 1; // Prompt the user to guess the number const userGuess = prompt(&quot;guess between 1 and 10:&quot;); // Check if the user&#39;s guess matches the random number if (userGuess == randomNumber) { alert(&quot;awesome! the number was &quot; + randomNumber); } else { alert(&quot;no, it was &quot; + randomNumber + &quot;. try again!&quot;); } . here is a simple guessing game where it just has the input function and the user guesses a number using what is basically a variation of the randint function except for javascript (the math.random function) .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/05/21/JSlesson.html",
            "relUrl": "/2023/05/21/JSlesson.html",
            "date": " • May 21, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Python 2D Iteration",
            "content": "Hacks 2D array (Mini-lab) . Try to build a Christmas Tree. The top shape and a trunk. There are two ways to do this... . Build it by pre-populating a 2D array | Build it completely programmatically | . Use the code below to help guide your adventure . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # pack into a list of matrices with titles matrices = [[&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers]] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Keypad 4 x ~3 Classic nested loops using ij indexes 1 2 3 4 5 6 7 8 9 0 Enhanced nested for loops 1 2 3 4 5 6 7 8 9 0 For loop with shortcut (*) row expansion 1 2 3 4 5 6 7 8 9 0 Keyboard 4 x ~13 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F . Hacks Monkey Jumpers (Mini-lab) . Feel free to use any ASCII art of your choice, there are some much better monkeys here. My little guys were simply made up out of my head while looking at unicode characters. . Build more monkeys, different monkeys or entire rhyme for the &quot;Monkey Jumpers&quot; countdown poem | Add names or other properties to the monkeys | Use a completely different application of something that is 2D. | Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; def main(): print(&quot;Nursery Rhyme&quot;) # identification message # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (◕‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) # cycle through monkeys that are left in poem countdown for row in range(i - 1, -1, -1): # cycles through remaining monkeys in countdown # cycles through monkey part by part for col in range(len(monkeys[row])): # prints specific part of the monkey from the 2D cell print(monkeys[row][col] + &quot; &quot;) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color # out of all the loops, prints finishing messages print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . Nursery Rhyme 5 little monkeys jumping on the bed... (◕‿◕✿) _⍾_/ ==4== _/ _ ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 4 little monkeys jumping on the bed... ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 3 little monkeys jumping on the bed... ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 2 little monkeys jumping on the bed... ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 0 little monkeys jumping on the bed... No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods(Mini-lab) . Build your own moving object. Make a few frames the energetic way, then figure out how to do it the programmatic way. . Be creative, by the way, I have always wanted my Monkeys jumping on a bed. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[32m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | &quot;) print(sp + &quot; |/ &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; __ |__/ &quot;) print(sp + &quot; ____/ &quot;) print(OCEAN_COLOR + &quot;--&quot;*35 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship function . | |/ __ |__/ ____/ - .",
            "url": "https://butterflyfish.github.io/butterflyfish/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "relUrl": "/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "2nd half of tri mcqs",
            "content": "43/67 . q10- science museum tickets - i chose one that only adds when both conditions are true when it should really add when only one condition is true . q32- calculate course grade- it should take it out of a count of one less than a length of the scores since one is being deleted . q36- park foot traffic simulation- i did not consider the benefit that was actually meant to be considered vs the overall benefits/disadvantages of modifying the simulation .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/05/01/CAN.html",
            "relUrl": "/2023/05/01/CAN.html",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Notebook - Data Related to User Guide",
            "content": "NOTE . As you follow along, make sure to fill in the blanks and complete the coding exercises! . Introduction . When building an application that requires users to create accounts or sign in, handling data related to users is crucial. This data can include things like user profiles, preferences, and activity logs, which can be used to personalize the user experience and improve the application&#39;s performance. . For example, by storing a user&#39;s name and profile picture, the application can address the user by name and display their picture, creating a more personal experience. Activity logs can also be used to track user behavior and help the application recommend new features or improvements. . By learning how to handle data related to users effectively and responsibly, you&#39;ll be equipped with the skills and knowledge needed to build robust and user-friendly applications that meet the needs of your users. . For simplicity purposes, we will be lecturing on how one can store and manipulate user data for future utilization. . Here we go! . Establishing Class/User Data and making a new user . In Python, classes are templates used to create objects, which are instances of those classes. Classes define the data elements (attributes) and methods that describe the behavior of the objects. Let&#39;s explore how to define a class and create objects in Python. . Example: Defining a User class . class User: def __init__(self, username, email): self.username = username self.email = email def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . In this example, we define a User class with a constructor method init that takes username and email as arguments. The display_info method is used to print the user information. . In the context of backend functionality, this class can be used to create, update, and delete user data. For example, when a new user signs up for an account, you could create a new User object with their username and email. This object can then be used to perform various operations, such as validating the user&#39;s input, storing the user&#39;s data in a database, or processing user related request . Creating a new user: . new_user = User(&quot;john_doe&quot;, &quot;john@example.com&quot;) new_user.display_info() . my new user: . new_user = User(&quot;sabine&quot;, &quot;sabine@sabine.com&quot;) new_user.display_info() . Lecture Topics: . Establishing Class/User Data and making a new user . In Python, classes are templates used to create objects, which are instances of those classes. Classes define the data elements (attributes) and methods that describe the behavior of the objects. Let&#39;s explore how to define a class and create objects in Python. . Example: Defining a User class . class User: def init(self, username, email): self.username = username self.email = email . def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . In this example, we define a User class with a constructor method init that takes username and email as arguments. The display_info method is used to print the user information. . Creating a new user: . python . new_user = User(&quot;john_doe&quot;, &quot;john@example.com&quot;) new_user.display_info() . Here, we create a new User object, new_user, with a specified username and email. We then call the display_info method to display the user&#39;s information. . Using property decorators (getter and setter) . property developers allow developers to access and modify instance data more concisely. The @property decorator creates a getter method, while the @attribute.setter decorator creates a setter method. . Example: . class Employee: def __init__(self, employee_id, name): self._employee_id = employee_id self._name = name @property def name(self): return self._name @name.setter def name(self, new_name): self._name = new_name . In this example, the Employee class has a name attribute, which is accessed and modified through the name property getter and setter methods. The _name attribute uses an underscore prefix, which is a convention to indicate it should not be accessed directly. . In the context of backend functionality, this Employee class can be used to model employees within an application. You can create instances of this class to store and manage employee data, and the getter and setter methods can be used to access and modify employee information in a controlled way. . Usage: . employee = Employee(1001, &quot;John Doe&quot;) print(employee.name) # Get the name using the getter method employee.name = &quot;Jane Doe&quot; # Set the name using the setter method print(employee.name) . employee = Employee(1001, &quot;John Doe&quot;) print(employee.name) # Get the name using the getter method . employee.name = &quot;Jane Doe&quot; # Set the name using the setter method print(employee.name) . In the context of backend functionality, the getter and setter methods provide a clean and controlled way to access and modify the attributes of an object. This can be particularly useful when interacting with databases, APIs, or other parts of a web application that require the management and manipulation of object attributes. . CHECK: Explain the function of getters and setters in your own words. setter lets you set value of a variable and getter allows you to retrieve it for use . class Car: def __init__(self, make, model, year): self._make = make self._model = model self._year = year @property def make(self): return self._make @make.setter def make(self, new_make): self._make = new_make @property def model(self): return self._model @model.setter def model(self, new_model): self._model = new_model @property def year(self): return self._year @year.setter def year(self, new_year): self._year = new_year . Take notes here on property decorators and the purpose they serve: . property decorators modify class attribute behavior | t adds functionality or behavior to a property but doesnt change the structure of it | can modify attributes without modifying the whole class | makes it more flexible to modify code after initial creation | . Students can then practice creating instances of their Car class and using the getter and setter methods to access and modify the car attributes. . In the context of backend functionality, this Car class can be used to model cars within an application. You can create instances of this class to store and manage car data, and the getter and setter methods can be used to access and modify car information in a controlled way. . Overview . WE COVERED: In conclusion, we have covered essential concepts in object-oriented programming using Python, including: . Defining classes and creating objects Property decorators (getter and setter) Class methods and static methods Inheritance and method overriding Working with multiple objects and class attributes . These concepts provide a solid foundation for understanding how to model real-world entities using classes and objects in Python. By learning to work with classes, objects, and their methods, students can develop more efficient and modular code. . As students become more comfortable with these concepts, they can explore more advanced topics, such as multiple inheritance, abstract classes, encapsulation, and polymorphism. Additionally, they can apply these principles to practical projects like web development with Flask and SQLite, as discussed earlier. . Overall, mastering object-oriented programming will greatly enhance students&#39; ability to develop complex and maintainable software systems. . Databases and SQlite . SQLite is a software library that provides a relational database management system. Unlike other databases, such as MySQL or PostgreSQL, SQLite is embedded within an application, which means it does not require a separate server process to operate. This makes SQLite a great choice for small-scale applications or for use in situations where you don&#39;t want to set up a full database server. . In this lesson, we will be demonstrating how to set up a SQLite database in Flask, which provides an easy-to-use interface for interacting with SQLite databases, and we&#39;ll walk through the process of setting up a new database, creating tables, and adding data. We&#39;ll also cover some basic SQL commands that you can use to interact with your database, including CREATE TABLE, INSERT, SELECT, UPDATE, and DELETE. By the end of this lesson, you&#39;ll have a good understanding of how to work with SQLite databases in Flask and be ready to start building your own database. . Setting up a SQLite database in Flask . One of the key features of flask is its ability to work seamlessly with databases, including SQLite. A database is a collection of data stored in an organized manner that can be easily accessed, managed, and updated. . SQlite databse in Flask . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;example.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE example_table (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Basic SQL commands (create, read, update, delete) . SQL is really useful because it helps people do a bunch of things with the data stored in databases. For example, they can use it to create new tables to organize data, add new data to a table, update data that&#39;s already there, or delete data that&#39;s no longer needed. . CRUD is an acronym that stands for the fundamental operations that can be performed on a database, which are Create, Read, Update, and Delete. A widely-used lightweight database management system is SQLite, which can be easily integrated with different programming languages. . C: To create a new record in a database, you must first define the table structure that will store the data. This can be accomplished using SQL commands such as CREATE. Once the table is created, data can be added to it using the INSERT INTO command. . | R: To retrieve data from the database, you can use the READ command. You can specify which fields you want to retrieve and the conditions you want to apply using the WHERE clause. There are also several functions available to aggregate and manipulate data. . | U: To modify existing data in the database, you can use the UPDATE command. You will need to specify which table and fields you want to update, and the conditions you want to apply using the WHERE clause. . | D: To remove data from the database, you can use the DELETE command . | . Take notes here on the basic components of SQL: the basic components are: . tables (organized collection of data with specific name and attributes) | queries (request for info from tables- allow data to be retrieved, modified, deleted, so like CRUD) | data types (supports a lot of dif ones to define the type of data it is storing, like date, boolean, integer, string, etc) | statements (interact with database- CRUD) | constraints (control type/range of data in table) | . import sqlite3 def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . This block of code is a menu function that helps with create, read, update, and delete (CRUD) tasks and displays the schema. The menu function acts as a control point that directs the program to call different functions based on what the user wants to do. When users enter their preferred action, the input is checked to see which function to use. The menu function is created with no arguments and is called repeatedly, displaying the menu options until the user decides to leave. . Creating a Database . import sqlite3 def create_database(): # Connect to the database (will create it if it doesn&#39;t exist) connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Create the professors table if it doesn&#39;t already exist cursor.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS professors ( name TEXT, field TEXT, rating REAL, reviews TEXT )&#39;&#39;&#39;) # Commit changes and close the connection connection.commit() connection.close() # Call the function to create the database create_database() . Create Function: . import sqlite3 def create(): database = &#39;instance/professors.db&#39; name = input(&quot;Enter the professor&#39;s name: &quot;) field = input(&quot;Enter the professor&#39;s field of expertise: &quot;) rating = input(&quot;Enter the professor&#39;s rating (out of 10): &quot;) reviews = input(&quot;Enter any reviews or comments about the professor: &quot;) # Connect to the database and create a cursor to execute SQL commands connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record into db cursor.execute(&quot;INSERT INTO professors (name, field, rating, reviews) VALUES (?, ?, ?, ?)&quot;, (name, field, rating, reviews)) # Commit the changes connection.commit() print(f&quot;{name} has been added to the list of coding professors.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Close cursor and connection cursor.close() connection.close() create() . has been added to the list of coding professors. . The create () function allows users to input information about a coding professor and store it in a SQLite database named &#39;professors.db&#39;. This script prompts the user for the professor&#39;s name, field of expertise, rating out of 10, and any reviews or comments about the professor. It then establishes a connection to the SQLite database and creates a cursor object for executing SQL commands. . Read Function . import sqlite3 def read(): try: # Open a connection to the database and create a cursor connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Fetch all records from the professors table cursor.execute(&quot;SELECT * FROM professors&quot;) rows = cursor.fetchall() # If there are any records, print them if len(rows) &gt; 0: print(&quot;List of coding professors:&quot;) for row in rows: print(f&quot;Name: {row[0]} nField of expertise: {row[1]} nRating: {row[2]} nReviews: {row[3]} n&quot;) else: print(&quot;There are no coding professors in the list.&quot;) except sqlite3.Error as error: print(&quot;Error while connecting to the database:&quot;, error) finally: # Close the cursor and the connection to the database cursor.close() connection.close() read() . This code demonstrates how to read data from a SQLite database using Python and the sqlite3 library. The first step is to establish a connection to the database and create a cursor object to execute SQL commands. Then, a SELECT query is executed to fetch all records from the &quot;professors&quot; table. If there are any records, the code iterates through each record and prints out the name, field of expertise, rating, and reviews for each coding professor. If there are no records in the table, a message indicating so is printed. . Update Function . import sqlite3 def update(): database = &#39;instance/professors.db&#39; connection = sqlite3.connect(database) cursor = connection.cursor() try: # Get the professor&#39;s name to update name = input(&quot;Enter the name of the professor to update: &quot;) # Retrieve the current record from the database cursor.execute(&quot;SELECT * FROM professors WHERE name=?&quot;, (name,)) record = cursor.fetchone() # If the professor is found, update the record if record: print(&quot;Enter the new information for the professor:&quot;) field = input(f&quot;Current field: {record[1]} nNew field: &quot;) rating = input(f&quot;Current rating: {record[2]} nNew rating: &quot;) reviews = input(f&quot;Current reviews: {record[3]} nNew reviews: &quot;) # Execute SQL to update the record cursor.execute(&quot;UPDATE professors SET field=?, rating=?, reviews=? WHERE name=?&quot;, (field, rating, reviews, name)) connection.commit() print(f&quot;{name}&#39;s record has been updated.&quot;) # If the professor is not found, notify the user else: print(f&quot;No record found for {name}.&quot;) except sqlite3.Error as error: print(&quot;Error while updating record&quot;, error) # Close cursor and connection cursor.close() connection.close() update () . This is an implementation of an update function for the professors database using the sqlite3 module in Python. The function first establishes a connection to the database file &#39;instance/professors.db&#39; and creates a cursor object to execute SQL commands. It prompts the user to enter the name of the professor to update and retrieves the corresponding record from the database using a SELECT statement with a WHERE clause to match the professor&#39;s name. If the professor is found in the database, the user is prompted to enter new information for the professor&#39;s field of expertise, rating, and reviews. The function then executes an UPDATE statement with the new information to update the record in the database. Finally, the function closes the cursor and connection to the database. The try-except block is used to catch any potential errors that may occur during the execution of the function. . Delete Function . import sqlite3 def delete(): # Connect to the database and create a cursor connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Prompt the user for the name of the professor to delete name = input(&quot;Enter the name of the professor you want to delete: &quot;) # Use a SQL query to find the professor with the given name cursor.execute(&quot;SELECT * FROM professors WHERE name=?&quot;, (name,)) row = cursor.fetchone() # If the professor exists, confirm deletion and delete the record if row: confirm = input(f&quot;Are you sure you want to delete {name}? (y/n): &quot;) if confirm.lower() == &#39;y&#39;: cursor.execute(&quot;DELETE FROM professors WHERE name=?&quot;, (name,)) connection.commit() print(f&quot;{name} has been deleted from the list of coding professors.&quot;) else: print(f&quot;{name} not found in the list of coding professors.&quot;) # Close the cursor and the connection to the database cursor.close() connection.close() delete() . This code is a Python function for deleting a record from a SQLite database. The function prompts the user to input the name of the professor they want to delete. It then uses a SQL query to search for the professor in the database. If the professor is found, the user is prompted to confirm the deletion. If the user confirms, the function executes a SQL command to delete the record from the database. The function also prints a message confirming that the professor has been deleted from the list of coding professors. If the professor is not found in the database, the function prints a message indicating that the professor is not in the list. . Our Project ... in the works . SAM Messaging System . Get started with your own! . i decided to make my database about students statistics in school . import sqlite3 def cstats(): # Connect to the database (will create it if it doesn&#39;t exist) connection = sqlite3.connect(&#39;instance/stats.db&#39;) cursor = connection.cursor() # Create the professors table if it doesn&#39;t already exist cursor.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS stats ( name TEXT, gpa TEXT, test REAL, grade REAL, target TEXT )&#39;&#39;&#39;) # Commit changes and close the connection connection.commit() connection.close() # Call the function to create the database cstats() . import sqlite3 def create(): database = &#39;instance/stats.db&#39; name = input(&quot;what is your name?: &quot;) gpa = input(&quot;what is your gpa?: &quot;) test = input(&quot;what is your sat/psat/act score?: &quot;) grade = input(&quot;what grade are you in?: &quot;) target = input(&quot;wheres your target school?:&quot;) # Connect to the database and create a cursor to execute SQL commands connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record into db cursor.execute(&quot;INSERT INTO stats (name, gpa, test, grade, target) VALUES (?, ?, ?, ?, ?)&quot;, (name, gpa, test, grade, target)) # Commit the changes connection.commit() print(f&quot;{name}&#39;s student data is in the database now!&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Close cursor and connection cursor.close() connection.close() create() . alyssa&#39;s student data is in the database now! . import sqlite3 def update(): database = &#39;instance/stats.db&#39; connection = sqlite3.connect(database) cursor = connection.cursor() try: name = input(&quot;what is the name of the student?: &quot;) cursor.execute(&quot;SELECT * FROM stats WHERE name=?&quot;, (name,)) record = cursor.fetchone() if record: print(&quot;what&#39;s the new info?:&quot;) gpa = input(f&quot;original gpa: {record[1]} nnew gpa: &quot;) test = input(f&quot;original test score: {record[2]} nnew test score: &quot;) grade = input(f&quot;original grade: {record[3]} nnew grade: &quot;) target = input(f&quot;original target school: {record[4]} nnew target school: &quot;) cursor.execute(&quot;UPDATE stats SET gpa=?, test=?, grade=?, target=? WHERE name=?&quot;, (gpa, test, grade, target, name)) connection.commit() print(f&quot;{name}&#39;s record has been updated.&quot;) else: print(f&quot; {name} doesn&#39;t exist!.&quot;) except sqlite3.Error as error: print(&quot;Error while updating record&quot;, error) # Close cursor and connection cursor.close() connection.close() update () . what&#39;s the new info?: alyssa&#39;s record has been updated. . import sqlite3 def delete(): connection = sqlite3.connect(&#39;instance/stats.db&#39;) cursor = connection.cursor() name = input(&quot;who do you want to get rid of?&quot;) cursor.execute(&quot;SELECT * FROM stats WHERE name=?&quot;, (name,)) row = cursor.fetchone() if row: confirm = input(f&quot;you really wanna delete {name}? (y/n): &quot;) if confirm.lower() == &#39;y&#39;: cursor.execute(&quot;DELETE FROM stats WHERE name=?&quot;, (name,)) connection.commit() print(f&quot;{name} has been deleted.&quot;) else: print(f&quot;{name} doesn&#39;t exist!.&quot;) cursor.close() connection.close() delete() import sqlite3 . sabine doesn&#39;t exist!. . HACKS . Make sure to fill in all blanks, take notes when prompted, and at least attempt each of the interactive coding exercises. (0.45) . | Create your own database and create an algorithm that can insert, update, and delete data related to user. Points will be awarded based on effort and success. (0.45) . Extra Credit: Connect your backend to a visible frontend! | . | .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/04/27/P5Y-Team-SAME-Now.html",
            "relUrl": "/2023/04/27/P5Y-Team-SAME-Now.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Big Idea 3, Simulations and SQLite Lesson Notes",
            "content": "Review Topics . All of the topics below are things that have been heavily covered and used throughout the class. We will mostly be focusing on more complicated uses and mechanics of these topics. . Lists . What are Lists? Lists are an ordered sequence of elements, where each element is a variable | Unlike dictionaries, lists&#39; keys are all integers that describe the order of the list | . | . Some examples of lists: . Playlist of songs | names of students in a class | contacts on your phone . | Each element of a string is referenced by an index (which is a number) and they generally start 0 but for the AP Exam it starts at 1. . AP Exam: 1,2,3,4 etc. | Python: 0,1,2,3 etc. | . | . How do lists Manage Complexity of a program? . We may not need as many variables. For example: One Variable that holds all students would be better than having a variable for EACH student | There can also be a list of test scores so if they need to be curved then the same calculation can be applied to the list (that has all the students) instead of doing the calculations one at a time | . | . Answer the following questions about the code block below: . Why do you think lists are helpful? What word does College Board like to use to describe the function of lists? Collegeboard calls it enumeration, and i think lists are helpful because they help manage complexity and sort information | . # variable of type string name = &quot;Sri Kotturi&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;html&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[2]&quot;, langs[2], type(langs[2])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . Mathematical Expressions . What is the output of the cell below? What Mathematical Expressions do you see being used? (List them below.) . - the output is 10. i see mathmatical expressions such as adding and averaging (indirectly) plus = being used. the output is the average of the two grades which is the same as the output of one since they are the same thing . grade1 = 10 grade2 = grade1 average_grade = (grade1 + grade2) // 2 #what are these two slashes? print(average_grade) . 10 . What is the value of num1, num2, and num3? Explain how each number ended up what it was. . num1 is 4096, num2 is 455, num3 is 1 | num1 got to be what it was because it became num 2 times num 3, which is 4 to the power of six or 4096. | num2 is num1 divided by 5, the sum of num1 and num3 is 4097, and 4097 // 9 equals 455 | num1 (4096) - 4096 // 5 equals 819 with a remainder of 1 so num3 becomes the remainder of that | . num1 = 2 num2 = 4 num3 = 6 num1 = num2 ** num3 num3 = num1 % 5 num2 = (num1 + num3) // 9 print(num1) print(num2) print(num3) . 4096 455 1 . Selection . Selection refers to the process of making decisions in a program based on certain conditions. It is normally done with conditional statements. . Conditionals . What is a conditional?: . Statement that allows code to execute different instructions if a certain condition is false | Allows program to make decisions based on data and input | . What are the main types of conditional statements?: . if | elif | else | . If statements . The if statement is used to check if a certain condition is true. The condition can be any expression that evaulates to a boolean value, True or False. If the condition is True, then it executes a code block. | If (condition) then (consequence) | Example: | . x = int(input(&quot;Enter a number&quot;)) if x &gt; 0: # if condition, check if this is true of false print(&quot;x is positive&quot;) # code that will execute if condition is met . Else . The else statemnt executes a code block when the if condition is False. | If (condition) then (consequence A), else (consequence B) | . Elif . The elif statement can check multiple conditions in a sequence, and execute a certain block of code if any of the conditions are true. | If (condition) then (consequence A), elif (condition) then (consequence B), else (consequence C) . | Example adding onto the code from before to take negative numbers and 0 into account . | . x = int(input(&quot;Enter a number, x:&quot;)) if x &gt; 0: # if condition, check if this is true of false print(&quot;x is positive&quot;) # code that will execute if condition is met elif x &lt; 0: # if previous condition not true... elif condition, check if this is true of false print(&quot;x is negative&quot;)# code that will execute if condition is met else: # everything else, in this case it is if x == 0 print(&quot;x is zero&quot;) # only executes if all previous conditions are not met . Nested Conditionals . What is a nested conditional?: . Conditional statement inside another conditional statement | Allows to check for more complex condition where one condition depends on another | . Nested Conditional Statements . Example | . x = int(input(&quot;Enter a number, x:&quot;)) if x % 2 == 0: print(&quot;x is even divisible by 2&quot;) # only ever checks is x is divisble by 3 if x is even. nested conditional if x % 3 == 0: print(&quot;x is divisible by 3&quot;) else: print(&quot;x is not divisible by 3&quot;) else: print(&quot;x is odd&quot;) . Indentation . When using conditionals and nested conditionals in Python, it is important to pay attention to the indentation in the code. The code inside the if, elif, and else blocks must be indented so they are nested wihtin the outer statements. This way, Python knows which code belongs to which block. . Binary Search . What is binary search and what is it used for?: . a searching algorithm- efficient way to find something in large data set | Find and select a specific element in a sorted list of elements | . How does binary search work?: . Repeatedly divides the search interval in half to find the middle element and compare the middle value to the target value, if not the same then it continues on to either the lower or upper half | Eliminate half of the remaining search interval elements each time | Efficient way to search for element in large dataset | . What is the time complexity and why?: . O(log(N)) | The maximum number of iterations is the amount of times the list can be divided in half until it reaches 1 number | Dividing by 2, so it is log2(N), logarigthm of n base 2 . | You may recognize the example below from the binary lesson last Friday . | . import random def binary_search_game(): low = 1 high = 100 target = random.randint(low, high) while True: guess = (low + high) // 2 print(f&quot;Is your number {guess}?&quot;) response = input(&quot;Enter &#39;higher&#39;, &#39;lower&#39;, or &#39;yes&#39;: &quot;) # conditional statements to check target number and guess if response == &#39;yes&#39;: print(f&quot;I guessed your number {guess}!&quot;) break elif response == &#39;higher&#39;: low = guess + 1 elif response == &#39;lower&#39;: high = guess - 1 else: print(&quot;Invalid input, please enter &#39;higher&#39;, &#39;lower&#39;, or &#39;yes&#39;.&quot;) binary_search_game() . Quick Hack . Write a program using conditionals and nested conditionals . Ideas: Quiz, game (rock paper scissors, guess number), etc | . num = int(input(&quot;enter a number: &quot;)) . if num % 2 == 0: if num &gt; 0: print(num, &quot;is a positive even number.&quot;) elif num &lt; 0: print(num, &quot;is a negative even number.&quot;) else: print(num, &quot;is zero.&quot;) else: if num &gt; 0: print(num, &quot;is a positive odd number.&quot;) elif num &lt; 0: print(num, &quot;is a negative odd number.&quot;) else: print(num, &quot;is zero.&quot;) . num = int(input(&quot;enter a number: &quot;)) if num % 2 == 0: if num &gt; 0: print(num, &quot;is a positive even number.&quot;) elif num &lt; 0: print(num, &quot;is a negative even number.&quot;) else: print(num, &quot;is zero.&quot;) else: if num &gt; 0: print(num, &quot;is a positive odd number.&quot;) elif num &lt; 0: print(num, &quot;is a negative odd number.&quot;) else: print(num, &quot;is zero.&quot;) . 1 is a positive odd number. . Introduction to Algorithms . an algorithm is a set of instructions that describes how to solve a problem or perform a specific task using a computer program. | It is a precise sequence of computational steps that take an input and produce an output | . How do Algorithms relate to data structures? . Algorithms often rely on specific data structures to solve problems efficiently. | Sorting algorithms require a data structure such as an array or a linked list to store and manipulate data. | Searching algorithms such as binary search require data structures like arrays or trees to organize and search through data. | . Important Terms . What is an algorithm? . it is a finite set of instructions that accomplishes a specific task | . Sequencing . means that there is an order in which to do things | . Selection . Helps to choose two different outcomes based off of a decision that the programmer wants to make | . Iteration . Repeat something until the condition is met. (also referred to as repetition) | . Calling and Developing Procedures . A procedure is a sequence of instructions that performs a specific task. | To call a procedure, you need to know its name and any arguments it requires. | When a procedure is called, the program jumps to its instruction and starts executing it. | The arguments passed to a procedure can be used within the procedure to perform tasks and calculations. | After the procedure has completed its task, it returns control back to the calling program. | . def add_numbers(a, b): sum = a + b print(&quot;The sum of&quot;, a, &quot;and&quot;, b, &quot;is&quot;, sum) # Call the procedure with arguments 5 and 7 add_numbers(5, 7) . The result of the procedure can be stored in a variable, printed to the screen, or used in any other way that is required by the program. | Procedures can be defined within the same program or in external files, and can be reused across multiple parts of the program. | To avoid errors and improve code readability, it&#39;s important to define and call procedures with proper syntax and conventions that are appropriate for the programming language you&#39;re using. | . def calculate_average(numbers): total = sum(numbers) count = len(numbers) average = total / count return average # Call the procedure with a list of numbers numbers_list = [10, 20, 30, 40, 50] result = calculate_average(numbers_list) # Display the result print(&quot;The average of&quot;, numbers_list, &quot;is&quot;, result) . Algorithmic Efficiency . Algorithmic efficiency refers to the amount of time and resources needed to execute an algorithm. | The efficiency of an algorithm can be measured in terms of its time complexity and space complexity. Time complexity refers to the amount of time required by an algorithm to complete its task as a function of its input size. | Space complexity refers to the amount of memory required by an algorithm to complete its task as a function of its input size. | can be analyzed using Big O notation, which provides an upper bound on the worst-case time and space complexity of the algorithm. | . | . What is the time complexity of the following code: . - O(N) - O(N*log(N)) - O(N * Sqrt(N)) - O(N*N) n*n because It is the last option because you have for i in range n and because the range from i to n you can approximate it to be n because in big o you dont worry about constants . a = 0 for i in range(N): for j in reversed(range(i, N)): a = a + i + j . What will be the time complexity of the following code? . n | (n+1) | n(n-1) | n(n+1) | . it is the third option because the first one runs n times nad the second one is n times n +1 times . value = 0 for i in range(n): #iterates &quot;n&quot; times, with &quot;i&quot; taking on values from 0 to n-1. for j in range(i): # iterates &quot;i&quot; times, with &quot;j&quot; taking on values from 0 to i-1. value=value+1 . Efficiency can be improved by optimizing algorithms or by using more efficient data structures and algorithms. Some common techniques for improving efficiency include reducing the size of input data, caching results, and parallelizing tasks. | Understanding algorithmic efficiency is important in software development, as it can impact the performance of applications and their ability to scale with larger data sets. | . | . Iteration and Simulations . Simulations are models of real-world phenomena or systems that use mathematical algorithms and computer programs simulate the real behavior and aspects of the subject being modeled. . Simulations are most often used to model complex or time-consuming things that would be difficult to test in real life, such as modeling the spread of diseases in certain ecosystems or testing the functionality of a potential product before it is made. . In this lesson, we will be looking at lists, iteration, and random values through the lens of simulations. . PLEASE RUN THE CODE BELOW BEFORE INTERACTING WITH THE CODE SEGMENTS IN THIS SECTION! . class Card: def __init__(self, suit, val): self.suit = suit self.val = val if val == 11: self.kind = &quot;Ace&quot; elif val == 12: self.kind = &quot;Jack&quot; elif val == 13: self.kind = &quot;Queen&quot; elif val == 14: self.kind = &quot;King&quot; else: self.kind = str(self.val) #return a formatted string version of a card def show(self): return f&quot;{self.kind} of {self.suit}&quot; #adjust aces to prevent breaking def ace_adj(self): if self.kind == &quot;Ace&quot;: self.val = 1 . Review: Lists and Iteration . Lists and iteration work hand-in-hand to efficiently process and/or modify multiple values at once. In a card game, for example, lists and iteration are used together frequently to make the game work correctly. . For Loops . For loops are probably the most well-known type of iterative loop used in code. Most of us know about the for variable in list format. . One helpful tool not a lot of people know about is the enumerate() function. When used in conjunction with a for loop, you can always have access to the index and value of each selected list entry. . numlist = [3, 5, 68, 203] for key, num in enumerate(numlist): print(f&quot;This entry&#39;s index is {str(key)}, but its value is {str(num)}.&quot;) print(f&quot;The difference between the value and the index is {num - key}.&quot;) . QUESTION: How is the key, num in enumerate(list) format similar to the format used when applying a for loop to a dictionary? . Answer: they both allow you to iterate over a collection of items and access both the keys and values of each item . List Comprehension . You may also see for loops used within a list like below. We went over this in class fairly recently. In this case, it is used to show the cards in the hand of a player. . player_hand = [] # the player&#39;s hand is represented as a list # because lists are mutable (can change), they can be added to, like drawing a card # assume the deck below is a a deck of shuffled cards deck = [Card(&quot;Hearts&quot;, 3), Card(&quot;Spades&quot;, 12), Card(&quot;Diamonds&quot;, 11)] def draw_card(hand, deck): hand.append(deck.pop()) #try it out draw_card(player_hand, deck) print([card.show() for card in player_hand]) . Recursive Loops . Recursive loops have you calling one function inside of another. If a function must make some change to a certain value multiple times, it is oftem most efficient to have a function call itself with slightly different arguments like the fibonacci sequence below. . def fibonacci(terms): if terms &lt;= 1: return terms return fibonacci(terms-1) + fibonacci(terms-2) fibonacci(5) . Nesting Loops . Nesting loops increases the time complexity of the program, but it can be used to do things like make a card deck (see below). . def build(deck): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): #HINT: try replacing this function deck.append(Card(suit, val)) . While Loops . While loops aren&#39;t used in the program, but they offer a offer a different way to repeat a set of instructions in a program. The procedure below the while [condition] line will occur until the condition is made not true. . Student Interaction: How could this build function be altered to function with a while loop within it? . def build(deck): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): deck.append(Card(suit, val)) #HINT: you may want to make an incrementing i variable . def build(deck): suits = [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;] val = 2 while val &lt;= 14: for suit in suits: deck.append(Card(suit, val)) val += 1 . While loops also alter an alternative way to loop a set of instructions forever, until a precise thing occurs to break the loop. See the code below. . import random i = 0 while True: i += 1 ch = random.randint(1, 11) if ch == 10: print(f&quot;It took {str(i)} random generations to get 10.&quot;) break . 49 random generations is a lot more than it would normally take, but it&#39;s important for code to be able to model unlikely, yet possible scenarios. Speaking of random values... . Random Values . Because unpredictable randomness occurs in the real world, it&#39;s important to have a way to represent it. Simulations are able to use randomization, which could be in the form of random number generation or other methods like shuffle. . Card decks are a great example of how random values can be used to represent real-world scenarios. In the card simulation, the random module&#39;s shuffle function is used to quite literally shuffle the deck, seen below. . def shuffle(deck): random.shuffle(deck) . Often, random selection methods use functions like randint or randrange as ways to select certain indexes in lists, or might use the random numbers in some other way. . QUESTION: Without shuffling the card order of the deck, can you think of a way that the aforementioned random module functions could be used to get a random card from the deck? Do so in the code cell below. . import random class Card: def __init__(self, suit, value): self.suit = suit self.value = value def choose_random_card(deck): index = random.randint(0, len(deck)-1) return deck[index] # create a deck of cards deck = [] suits = [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;] for suit in suits: for value in range(2, 15): deck.append(Card(suit, value)) # choose a random card from the deck random_card = choose_random_card(deck) print(&quot;Random card:&quot;, random_card.value, &quot;of&quot;, random_card.suit) . Random card: 8 of Clubs . Simulation Homework . Now that you&#39;ve learned about simulations and how they&#39;re used, it&#39;s time to apply that knowledge by creating a (basic) simulation of a real-world scenario. It can be something in nature, like the changes in the wildlife population of a certain area; it can be a game, like Uno (no blackjack though, that&#39;s taken); or it can be something completely random and unique. . The simulation must include... . Use of at least one random value | At least one list or similar data type (dictionary, set, etc.) | Efficient use of iteration (must support the purpose of the simualtion) | Selection (use of conditionals) | . Do this in your student copy in the cell provided. This is worth 0.9 (or more with extra credit) out of the 3 possible points. . # (Concert attendance? Wind speeds? Interactions between subjects in large environments?) # Think about the sort of things that could be saved in lists, dictionaries, etc. # (Even better if you can take advantage of the specific features of multiple types of data sets!) # What kind of iteration happens in the real world? # What occurs repeatedly, even over a long period of time? # You could model the results of a disease spreading through a population without it taking IRL years. . import random initial_population = 10 max_population = 100 growth_rate = 0.1 death_rate = 0.05 environmental_factor = 0.5 plants = [] for i in range(initial_population): plants.append(random.randint(1, 10)) for year in range(1, 11): print(f&quot;year {year}:&quot;) new_plants = [] for plant in plants: if random.random() &lt; death_rate: print(f&quot;plant {plant} died.&quot;) continue if random.random() &lt; environmental_factor: plant_growth_rate = growth_rate * 2 else: plant_growth_rate = growth_rate new_size = plant + int(plant * plant_growth_rate) if new_size &gt; max_population: new_size = max_population new_plants.append(new_size) print(f&quot;plant {plant} grew to {new_size}.&quot;) plants = new_plants total_population = sum(plants) print(f&quot; nfinal plant population: {total_population}&quot;) . year 1: plant 5 grew to 6. plant 10 grew to 12. plant 8 grew to 8. plant 3 grew to 3. plant 1 grew to 1. plant 10 grew to 12. plant 2 grew to 2. plant 2 grew to 2. plant 9 died. plant 5 grew to 5. year 2: plant 6 grew to 6. plant 12 died. plant 8 grew to 8. plant 3 grew to 3. plant 1 grew to 1. plant 12 grew to 14. plant 2 grew to 2. plant 2 grew to 2. plant 5 grew to 5. year 3: plant 6 grew to 7. plant 8 grew to 8. plant 3 grew to 3. plant 1 grew to 1. plant 14 grew to 15. plant 2 grew to 2. plant 2 grew to 2. plant 5 grew to 5. year 4: plant 7 grew to 7. plant 8 grew to 9. plant 3 grew to 3. plant 1 grew to 1. plant 15 grew to 18. plant 2 grew to 2. plant 2 grew to 2. plant 5 grew to 5. year 5: plant 7 grew to 8. plant 9 grew to 10. plant 3 grew to 3. plant 1 grew to 1. plant 18 grew to 21. plant 2 grew to 2. plant 2 grew to 2. plant 5 grew to 5. year 6: plant 8 grew to 8. plant 10 grew to 12. plant 3 grew to 3. plant 1 grew to 1. plant 21 grew to 25. plant 2 grew to 2. plant 2 grew to 2. plant 5 grew to 6. year 7: plant 8 grew to 8. plant 12 grew to 13. plant 3 grew to 3. plant 1 grew to 1. plant 25 grew to 30. plant 2 died. plant 2 grew to 2. plant 6 grew to 7. year 8: plant 8 grew to 9. plant 13 grew to 15. plant 3 grew to 3. plant 1 grew to 1. plant 30 grew to 33. plant 2 grew to 2. plant 7 grew to 7. year 9: plant 9 grew to 9. plant 15 died. plant 3 grew to 3. plant 1 grew to 1. plant 33 grew to 39. plant 2 died. plant 7 grew to 7. year 10: plant 9 grew to 9. plant 3 grew to 3. plant 1 grew to 1. plant 39 grew to 42. plant 7 grew to 8. final plant population: 63 . Databases . We have already gone over databases in this class, but here is a refresher. A databse contains data that&#39;s stored in columns and rows. The information in this database can then be pulled from the database and can be used in a program. . Setting Up the Database . Run the code cell below to prepare SQLite to create the database. If your system is struggling with the flask functions, verify that you&#39;re in the correct Python environment. REMEMBER: You should only db.init_app(app) ONCE during the process! . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . The Model File . The model file plays a crucial role in the formation of the database. . The model helps to create new databases | It provides a standardized method for formating the database entries across different systems | Objects used within the database are created | . import os, base64 import json from sqlalchemy.exc import IntegrityError # Define the User class to manage actions in the &#39;users&#39; table class User(db.Model): __tablename__ = &#39;players&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _username = db.Column(db.String(255), unique=False, nullable=False) _streak = db.Column(db.Integer, unique=True, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, username, streak): self._username = username self._streak = streak # a username getter method, extracts username from object @property def username(self): return self._username # a setter function, allows username to be updated after initial object creation @username.setter def username(self, username): self._username = username # a getter method, extracts streak from object @property def streak(self): return self._streak # a setter function, allows streak to be updated after initial object creation @streak.setter def streak(self, streak): self._streak = streak # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;streak&quot;: self.streak } # CRUD update: updates user name, password, phone # returns self def update(self, username, streak): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if streak &gt; 0: self.streak = streak db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(username=&quot;Mr. Cards&quot;, streak=5) u2 = User(username=&quot;Kard Kowntre&quot;, streak=10) u3 = User(username=&quot;Un Bea Table&quot;, streak=15) users = [u1, u2, u3] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: user.create() print(f&#39;Created user with username &quot;{user.username}&quot;.&#39;) except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {user.username}&quot;) . The init Fuction . The init method has one purpose which is to initialize the object&#39;s attributes. This is what is known as the constructor. In our project, the init method initalizes the username and streak as variables. . def __init__(self, username, streak): self._username = username self._score = streak . Setters and Getters . Setters and Getters are important methods used when writing code for databases. Setter: a method that allows us to set or change the value of an attribute in a class. Getter: a method that allows us to access an attribute in a given class. . Setter Example . @streak.setter def streak(self, streak): self._streak = streak . NameError Traceback (most recent call last) /Users/disvs/vscode/butterflyfish/_notebooks/2023-04-25-studenttemplate.ipynb Cell 59 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/butterflyfish/_notebooks/2023-04-25-studenttemplate.ipynb#Y110sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # a setter function, allows streak to be updated after initial object creation -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/butterflyfish/_notebooks/2023-04-25-studenttemplate.ipynb#Y110sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; @streak.setter &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/butterflyfish/_notebooks/2023-04-25-studenttemplate.ipynb#Y110sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; def streak(self, streak): &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/butterflyfish/_notebooks/2023-04-25-studenttemplate.ipynb#Y110sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; self._streak = streak NameError: name &#39;streak&#39; is not defined . Getter Example . @property def streak(self): return self._streak . The Api File . An API is an important part of having a functional database. . it acts as a messenger that allows programs to access data from the others | it connects all information | for a database, an api retrieves the data requested in code for the user | . import json from flask import Blueprint, request, jsonify from flask_restful import Api, Resource # used for REST API building user_api = Blueprint(&#39;user_api&#39;, __name__, url_prefix=&#39;/api/users&#39;) api = Api(user_api) class UserAPI: class _CRUD(Resource): # User API operation for Create, Read. THe Update, Delete methods need to be implemeented def post(self): # Create method &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate name username = body.get(&#39;username&#39;) if username is None or len(username) &lt; 1: return {&#39;message&#39;: f&#39;Username is missing, or is less than a character&#39;}, 400 # validate uid streak = body.get(&#39;streak&#39;) if streak is None or streak &lt; 1: return {&#39;message&#39;: f&#39;Streak is missing, or is less than 1&#39;}, 400 &#39;&#39;&#39; #1: Key code block, setup USER OBJECT &#39;&#39;&#39; uo = User(username=username, streak=streak) &#39;&#39;&#39; #2: Key Code block to add user to database &#39;&#39;&#39; # create user in database user = uo.create() # success returns json of user if user: return jsonify(user.read()) # failure returns error return {&#39;message&#39;: f&#39;Processed {username}, either a format error or a duplicate&#39;}, 400 def get(self): # Read Method users = User.query.all() # read/extract all users from database json_ready = [user.read() for user in users] # prepare output in json return jsonify(json_ready) # jsonify creates Flask response object, more specific to APIs than json.dumps def put(self): body = request.get_json() # get the body of the request id = body.get(&#39;id&#39;) username = body.get(&#39;username&#39;) streak = body.get(&#39;streak&#39;) # get the UID (Know what to reference) user = User.query.get(id) # get the player (using the uid in this case) user.update(username=username, streak=streak) return f&quot;{user.read()} Updated&quot; def delete(self): body = request.get_json() id = body.get(&#39;id&#39;) player = User.query.get(id) player.delete() return f&quot;{player.read()} Has been deleted&quot; # building RESTapi endpoint api.add_resource(_CRUD, &#39;/&#39;) . This is important particularly in a full flask respository context, but in this case, you&#39;ll just need to run the initUsers() function. . initUsers() . An Alternative Method of Making SQLite Databases . In a previous lesson, we went over using the cursor object in SQLite3. Rather than go over all of that here, this lesson goes over it thoroughly. (You may use this method for the homework below.) . Database Homework . For this assignment, we&#39;d like you to make your own database file as instructed above. Remember, the API file isn&#39;t necessary in this case; you&#39;ll be focusing on making the model and the init function. . Your database must include these things: . A class with at least four attributes (if not the cursor method) | Setters and getters for this class (if not the cursor method) | Each of the CRUD functions | An init function with at least four entries | A screenshot showing proof that your SQLite file has been created correctly | . Feel free to base your database on the model provided above! Ask our group if you have any questions or concerns. . # If you&#39;ve already run the db.init_app(app) function while in this notebook, # don&#39;t do it again until you&#39;ve closed it! . Grading . Your submission will be graded based on the following criteria: . Filling in the blank throughout the lesson and providing code in the given cells when applicable (0.9) | Simulation homework (0.9) | Database homework (0.9) | . Here are some ideas for ways to increase your score above a 2.7: . Make a frontend version of your simulation that can be interacted with on your blog | Connect your simulation to the database you create | Create a menu that allows a user to make an entry in your database (CRUD functions within it) | You can establish a relationship between two classes/tables in your database (see the relationship between the User and Note classes in the Nighthawk Coders flask repository) | .",
            "url": "https://butterflyfish.github.io/butterflyfish/bigidea3simsqlite/",
            "relUrl": "/bigidea3simsqlite/",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Petite Pandas Data Analysis using Pandas and NumPy",
            "content": "Predictive analysis is the use of statistical, data mining, and machine learning techniques to analyze current and historical data in order to make predictions about future events or behaviors. It involves identifying patterns and trends in data, and then using that information to forecast what is likely to happen in the future. . Predictive analysis is used in a wide range of applications, from forecasting sales and demand, to predicting customer behavior, to detecting fraudulent transactions. It involves collecting and analyzing data from a variety of sources, including historical data, customer data, financial data, and social media data, among others. . The process of predictive analysis typically involves the following steps: . Defining the problem and identifying the relevant data sources | Collecting and cleaning the data | Exploring and analyzing the data to identify patterns and trends | Selecting an appropriate model or algorithm to use for predictions | Training and validating the model using historical data | Using the model to make predictions on new data | Monitoring and evaluating the performance of the model over time | Predictive analysis can help organizations make more informed decisions, improve efficiency, and gain a competitive advantage by leveraging insights from data. | It is most commonly used in Retail, where workers try to predict which products would be most popular and try to advertise those products as much as possible, and also Healthcare, where algorithms analyze patterns and reveal prerequisites for diseases and suggest preventive treatment, predict the results of various treatments and choose the best option for each patient individually, and predict disease outbreaks and epidemics.1. . 1. Intro to NumPy and the features it consists . Numpy, by definition, is the fundamental package for scientific computing in Python which can be used to perform mathematical operations, providing multidimensional array objects, and makes data analysis much easier. Numpy is very important and useful when it comes to data analysis, as it can easily use its features to complete and perform any mathematical operation, as well as analyze data files. . If you don&#39;t already have numpy installed, you can do so using conda install numpy or pip install numpy . Once that is complete, to import numpy in your code, all you must do is: . import numpy as np . 2. Using NumPy to create arrays . An array is the central data structure of the NumPy library. They are used as containers which are able to store more than one item at the same time. Using the function np.array is used to create an array, in which you can create multidimensional arrays. . Shown below is how to create a 1D array: . a = np.array([1, 2, 3]) print(a) # this creates a 1D array . How could you create a 3D array based on knowing how to make a 1D array? . b = np.array([[[1, 2, 3, 4], [5, 6, 7, 8]]]) print(b) . Arrays can be printed in different ways, especially a more readable format. As we have seen, arrays are printed in rows and columns, but we can change that by using the reshape function . c = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print(c.reshape(1, 9)) # organizes it all in a single line of output . In the code segment below, we can also specially select certain rows and columns from the array to further analyze selective data. . print(c[1:, :2]) # the 1: means &quot;start at row 1 and select all the remaining rows&quot; # the :2 means &quot;select the first two columns&quot; . 3. Basic array operations . One of the most basic operations that can be performed on arrays is arithmetic operations. With numpy, it is very easy to perform arithmetic operations on arrays. You can add, subtract, multiply and divide arrays, just like you would with regular numbers. When performing these operations, numpy applies the operation element-wise, meaning that it performs the operation on each element in the array separately. This makes it easy to perform operations on large amounts of data quickly and efficiently. . a = np.array([1, 2, 3]) b = np.array([4, 5, 6]) print(a + b) # adds each value based on the column the integer is in print(a - b) # subtracts each value based on the column the integer is in print(a * b) # multiplies each value based on the column the integer is in print(a / b) # divides each value based on the column the integer is in . d = np.exp(b) e = np.sqrt(b) print(d) print(e) . From the knowledge of how to use more advanced mathematical expressions than the basic 4 mathematical operations such as exponent and square root, now can you code how to calculate the 3 main trig expressions (sin, cos, tan), natural log, and log10 of a 1D array. . # calculate cos # calculate tan # calculate natural log # calculate log10 . 4. Data analysis using numpy . Numpy provides a convenient and powerful way to perform data analysis tasks on large datasets. One of the most common tasks in data analysis is finding the mean, median, and standard deviation of a dataset. Numpy provides functions to perform these operations quickly and easily. The mean function calculates the average value of the data, while the median function calculates the middle value in the data. The standard deviation function calculates how spread out the data is from the mean. Additionally, numpy provides functions to find the minimum and maximum values in the data. These functions are very useful for gaining insight into the properties of large datasets and can be used for a wide range of data analysis tasks. . data = np.array([2, 5, 12, 13, 19]) print(np.mean(data)) # finds the mean of the dataset print(np.median(data)) # finds the median of the dataset print(np.std(data)) # finds the standard deviation of the dataset print(np.min(data)) # finds the min of the dataset print(np.max(data)) # finds the max of the dataset . Now from learning this, can you find a different way from how we can solve the sum or products of a dataset other than how we learned before? . newway = np.array([2, 3, 25]) print(np.sum(newway)) print(np.product(newway)) . 30 150 . Numpy also has the ability to handle CSV files, which are commonly used to store and exchange large datasets. By importing CSV files into numpy arrays, we can easily perform complex operations and analysis on the data, making numpy an essential tool for data scientists and researchers. . genfromtxt and loadtxt are two functions in the numpy library that can be used to read data from text files, including CSV files. . genfromtxt is a more advanced function that can be used to read text files that have more complex structures, including CSV files. genfromtxt can handle files that have missing or invalid data, or files that have columns of different data types. It can also be used to skip header lines or to read only specific columns from the file. . import numpy as np padres = np.genfromtxt(&#39;files/padres.csv&#39;, delimiter=&#39;,&#39;, dtype=str, encoding=&#39;utf-8&#39;) # delimiter indicates that the data is separated into columns which is distinguished by commas # genfromtxt is used to read the csv file itself # dtype is used to have numpy automatically detect the data type in the csv file print(padres) . loadtxt is a simpler function that can be used to read simple text files that have a regular structure, such as files that have only one type of data (such as all integers or all floats). loadtxt can be faster than genfromtxt because it assumes that the data in the file is well-structured and can be easily parsed. . import numpy as np padres = np.loadtxt(&#39;files/padres.csv&#39;, delimiter=&#39;,&#39;, dtype=str, encoding=&#39;utf-8&#39;) print(padres) . for i in padres: print(&quot;,&quot;.join(i)) . Pandas . What is Pandas . Pandas is a Python library used for working with data sets. A python library is something It has functions for analyzing, cleaning, exploring, and manipulating data. . Why Use Pandas? . Pandas allows us to analyze big data and make conclusions based on statistical theories. Pandas can clean messy data sets, and make them readable and relevant. Also it is a part of data analysis, and data manipulation. . What Can Pandas Do? . Pandas gives you answers about the data. Like: . Is there a correlation between two or more columns? | What is average value | Max value | Min value | How to load data | Delete data | Sort Data. | . Pandas are also able to delete rows that are not relevant, or contains wrong values, like empty or NULL values. This is called cleaning the data. . Basics of Pandas. . import pandas as pd # What this does is it calls the python pandas library and this code segment is needed whenever incorporating pandas. . DICTIONARIES AND DATASETS . One way you are able to manipulate a pandas data set is by creating a dictionary and calling it as seen with the dict data 1 and pd.dataframe which is a way to print the set. | . import pandas as pd data1 = { &#39;teams&#39;: [&quot;BARCA&quot;, &quot;REAL&quot;, &quot;ATLETICO&quot;], &#39;standings&#39;: [1, 2, 3] } myvar = pd.DataFrame(data1) print(myvar) . Indexing and manipulaton of data through lists. . With pandas you can also organize the data which is one of its biggest perks, we call this indexing, this is when we define the first column in a data frame. | . import pandas as pd score = [5/5, 5/5, 1/5] myvar = pd.Series(score, index = [&quot;math&quot;, &quot;science&quot;, &quot;pe&quot;]) print(myvar) . Pandas Classes . Within pandas the library consits of a lot of functions which allow you to manipulate datasets in lists dictionsaries and csv files here are some of the ones we are going to cover (hint: take notes on these) . Series | Index | PeriodIndex | DataframeGroupedBy | Categorical | Time Stamp | . PeriodIndex . This allows for a way to repeat data over time that it occurs as seen from january 2022 to december 2023. You can use Y for years, M for months, and D for days. | . import pandas as pd time = pd.period_range(&#39;2022-01&#39;, &#39;2022-12&#39;, freq=&#39;M&#39;) print(time) . Now implement a way to show a period index from June 2022 to July 2023 in days. . import pandas as pd time = pd.period_range(&#39;2022-01&#39;, &#39;2022-12&#39;, freq=&#39;D&#39;) print(time) . PeriodIndex([&#39;2022-01-01&#39;, &#39;2022-01-02&#39;, &#39;2022-01-03&#39;, &#39;2022-01-04&#39;, &#39;2022-01-05&#39;, &#39;2022-01-06&#39;, &#39;2022-01-07&#39;, &#39;2022-01-08&#39;, &#39;2022-01-09&#39;, &#39;2022-01-10&#39;, ... &#39;2022-11-22&#39;, &#39;2022-11-23&#39;, &#39;2022-11-24&#39;, &#39;2022-11-25&#39;, &#39;2022-11-26&#39;, &#39;2022-11-27&#39;, &#39;2022-11-28&#39;, &#39;2022-11-29&#39;, &#39;2022-11-30&#39;, &#39;2022-12-01&#39;], dtype=&#39;period[D]&#39;, length=335) . Dataframe Grouped By . This allows for you to organize your data and calculate the different functions such as | count(): returns the number of non-null values in each group. | sum(): returns the sum of values in each group. | mean(): returns the mean of values in each group. | min(): returns the minimum value in each group. | max(): returns the maximum value in each group. | median(): returns the median of values in each group. | var(): returns the variance of values in each group. | agg(): applies one or more functions to each group and returns a new DataFrame with the results. | . import pandas as pd data = { &#39;Category&#39;: [&#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;], &#39;Value&#39;: [100, 250, 156, 255, 240, 303, 253, 3014] } df = pd.DataFrame(data) grouped = df.groupby(&#39;Category&#39;).#GUESS WHAT THIS WOULD BE IF WE WERE LOOKING FOR COMBINED TOTALS!() print(grouped) . Categorical . This sets up a category for something and puts it within the categories and allows for better orginzation | . import pandas as pd colors = pd.Categorical([&#39;yellow&#39;, &#39;orange&#39;, &#39;blue&#39;, &#39;yellow&#39;, &#39;orange&#39;], categories=[&#39;yellow&#39;, &#39;orange&#39;, &#39;blue&#39;]) print(colors) . Timestamp Class . This allows to display a single time which can be useful when working with datasets that deal with time allowing you to manipulate the time you do something and how you do it. | . import pandas as pd timing = pd.Timestamp(&#39;2023-02-05 02:00:00&#39;) print(#WHAT WOULD THIS BE) . CSV FILES! . A csv file contains data and within pandas you are able to call the function and you are able to manipulate the data with the certain data classes talked about above. | . Name, Position, Average, HR, RBI, OPS, JerseyNumber | Manny Machado, 3B, .298, 32, 102, .897, 13 | Tatis Jr, RF, .281, 42, 97, .975, 23 | Juan Soto, LF, .242, 27, 62, .853, 22 | Xanger Bogaerts, SS, .307, 15, 73, .833, 2 | Nelson Cruz, DH, .234, 10, 64, .651, 32 | Matt Carpenter, DH, .305, 15, 37, 1.138, 14 | Cronezone, 1B, .239, 17, 88, .722, 9 | Ha-Seong Kim, 2B, .251, 11, 59, .708, 7 | Trent Grisham, CF, .184, 17, 53, .626, 1 | Luis Campusano, C, .250, 1, 5, .593, 12 | Austin Nola, C, .251, 4, 40, .649, 26 | Jose Azocar, OF, .257, 0, 10, .630, 28 | . QUESTION: WHAT DO YOU GUYS THINK THE INDEX FOR THIS WOULD BE? . i think the index would be the range between the smallest and biggest for each individual section . Can you explain what is going on in this code segment below. (hint: define what ascending= false means, and df. head means) . ascending = false means it is descending in value order df.head means the top of the set/ from the beginning . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/padres.csv&#39;).sort_values(by=[&#39;Name&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) print(&#39;, &#39;.join(df.tail(10))) . import pandas as pd df = pd.read_csv(&quot;./files/housing.csv&quot;) mode_total_rooms = df[&#39;total_rooms&#39;].mode() print(f&quot;The mode of the &#39;total_rooms&#39; column is: {mode_total_rooms}&quot;) . import pandas as pd df = pd.read_csv(&quot;./files/housing.csv&quot;) grouped_df = df.groupby(&#39;total_rooms&#39;) agg_df = grouped_df.agg({&#39;total_rooms&#39;: &#39;sum&#39;, &#39;population&#39;: &#39;mean&#39;, &#39;longitude&#39;: &#39;count&#39;}) # WHAT DO YOU GUYS THINK df.agg means in context of pandas and what does it stand for. # it means aggregate- specific way to run and file a function print(agg_df) . Our Frontend Data Analysis Project . Link . Popcorn Hacks . Complete fill in the blanks for Predictive Analysis Numpy | Takes notes on Panda where it asks you to | Complete code segment tasks in Panda and Numpy | . Main Hack . Make a data file - content is up to you, just make sure there are integer values - and print | Run Panda and Numpy commands Panda: Find Min and Max values DONE | Sort in order - can be order of least to greatest or vice versa | Create a smaller dataframe and merge it with your data file | . | Numpy: Random number generation | create a multi-dimensional array (multiple elements) | create an array with linearly spaced intervals between values | . | . | . Grading . The grading will be binary - all or nothing; no partial credit . 0.3 for all the popcorn hacks | 0.6 for the main hack - CSV file | 0.1 for going above and beyond in the main hack | . import numpy as np students = np.loadtxt(&#39;files/students.csv&#39;, delimiter=&#39;,&#39;, dtype=str, encoding=&#39;utf-8&#39;) print(students) . [[&#39;Name&#39; &#39; GPA&#39; &#39; Hobby&#39; &#39; Age&#39;] [&#39;Sabine&#39; &#39; 4.0&#39; &#39; Yearbook&#39; &#39; 16&#39;] [&#39;Alyssa&#39; &#39; 4.0&#39; &#39; HOSA&#39; &#39; 16&#39;] [&#39;Sloane&#39; &#39; 4.0&#39; &#39; Band&#39; &#39; 13&#39;] [&#39;Sylvie&#39; &#39; 4.0&#39; &#39; Biking&#39; &#39; 9&#39;] [&#39;Bob&#39; &#39; 4.0&#39; &#39; Drawing&#39; &#39; 10&#39;] [&#39;Joe&#39; &#39; 3.0&#39; &#39; Jumping&#39; &#39; 1&#39;]] . import pandas as pd df = pd.DataFrame(students) print(df) . 0 1 2 3 0 Name GPA Hobby Age 1 Sabine 4.0 Yearbook 16 2 Alyssa 4.0 HOSA 16 3 Sloane 4.0 Band 13 4 Sylvie 4.0 Biking 9 5 Bob 4.0 Drawing 10 6 Joe 3.0 Jumping 1 . students = pd.read_csv(&quot;files/students.csv&quot;) g = students[&#39; Age&#39;].tolist() print(g) . [16, 16, 13, 9, 10, 1] . print(&quot;the oldest child is: &quot;) print(np.max(g)) print(&quot;the youngest student is: &quot;) print(np.min(g)) . the oldest child is: 16 the youngest student is: 1 . gsort = pd.read_csv(&#39;files/students.csv&#39;).sort_values(by=[&#39; Age&#39;], ascending=True) print(gsort) . Name GPA Hobby Age 5 Joe 3.0 Jumping 1 3 Sylvie 4.0 Biking 9 4 Bob 4.0 Drawing 10 2 Sloane 4.0 Band 13 0 Sabine 4.0 Yearbook 16 1 Alyssa 4.0 HOSA 16 . nt = pd.DataFrame({ &#39; Age&#39;: [9, 10], &#39;Name&#39;: [&#39;Sylvie&#39;, &#39;Bob&#39;], }) odf = pd.read_csv(&#39;files/students.csv&#39;).sort_values(by=[&#39; Age&#39;], ascending=True) print(df) pd.concat([odf, nt], axis=0) . 0 1 2 3 0 Name GPA Hobby Age 1 Sabine 4.0 Yearbook 16 2 Alyssa 4.0 HOSA 16 3 Sloane 4.0 Band 13 4 Sylvie 4.0 Biking 9 5 Bob 4.0 Drawing 10 6 Joe 3.0 Jumping 1 . Name GPA Hobby Age . 5 Joe | 3.0 | Jumping | 1 | . 3 Sylvie | 4.0 | Biking | 9 | . 4 Bob | 4.0 | Drawing | 10 | . 2 Sloane | 4.0 | Band | 13 | . 0 Sabine | 4.0 | Yearbook | 16 | . 1 Alyssa | 4.0 | HOSA | 16 | . 0 Sylvie | NaN | NaN | 9 | . 1 Bob | NaN | NaN | 10 | . NUMPY . this just generates one random number between 1 and 10 . import numpy as np rand_int = np.random.randint(1, 10) print(rand_int) . 2 . import numpy as np sabinesfriends = np.array([ [&quot;Alyssa&quot;, &quot;Junior &quot;, 1, True], [&quot;El&quot;, &quot;Senior&quot;, 2, True], [&quot;Bria&quot;, &quot;Senior&quot;, 5, True] ]) print(sabinesfriends) sabinesfriends_df = pd.DataFrame(sabinesfriends, columns=[&quot;Name&quot;, &quot;Grade&quot;, &quot;Howlong I&#39;ve known them&quot;, &quot;still friends&quot;]) print() print (sabinesfriends_df) . [[&#39;Alyssa&#39; &#39;Junior &#39; &#39;1&#39; &#39;True&#39;] [&#39;El&#39; &#39;Senior&#39; &#39;2&#39; &#39;True&#39;] [&#39;Bria&#39; &#39;Senior&#39; &#39;5&#39; &#39;True&#39;]] Name Grade Howlong I&#39;ve known them still friends 0 Alyssa Junior 1 True 1 El Senior 2 True 2 Bria Senior 5 True . import numpy as np sabinesfriends = np.array([ [&quot;Alyssa&quot;, &quot;Junior &quot;, *np.linspace(1, 3, 5), True], [&quot;El&quot;, &quot;Senior&quot;, *np.linspace(1, 4, 6), True], [&quot;Bria&quot;, &quot;Senior&quot;, *np.linspace(2, 4, 6), False] ]) print(sabinesfriends) . [list([&#39;Alyssa&#39;, &#39;Junior &#39;, 1.0, 1.5, 2.0, 2.5, 3.0, True]) list([&#39;El&#39;, &#39;Senior&#39;, 1.0, 1.6, 2.2, 2.8, 3.4, 4.0, True]) list([&#39;Bria&#39;, &#39;Senior&#39;, 2.0, 2.4, 2.8, 3.2, 3.6, 4.0, False])] . /var/folders/sv/x_7f_68x4vg6tfvg084_dn400000gp/T/ipykernel_41528/3116262714.py:4: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify &#39;dtype=object&#39; when creating the ndarray sabinesfriends = np.array([ .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/04/25/Data-Analysis-Panda-Numpy.html",
            "relUrl": "/2023/04/25/Data-Analysis-Panda-Numpy.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs a program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio Processor: Apple M1 chip with 8-core CPU and 8-core GPU Processor GHz: 3.2 base speed, may vary based on task or how much my computer is heating up Memory: 8 GB unified Memory in GB: 8 GB Storage: 256 GB SSD my computer has ventura as the operating system . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices: Input devices are hardware devices that allow users to input data and instructions into a computer system. Examples include keyboards, mice, scanners, and microphones. | Output devices: Output devices are hardware devices that display or produce data or information processed by a computer system. Examples include monitors, printers, and speakers. | Program file: A program file is a file that contains code written in a programming language, which can be executed by a computer system to perform specific tasks. | Program code: Program code is the set of instructions written in a programming language that define the behavior of a computer program. | Processes: A process is an instance of a computer program that is currently executing in memory. | Ports: Ports are interfaces on a computer system that allow devices to communicate with each other. Examples include USB ports, Ethernet ports, and HDMI ports. | Data file: A data file is a file that contains data or information, such as text, images, or video, that is stored on a computer system. | Inspect running code: Inspecting running code involves examining the code that is currently executing in a program. This can be useful for debugging and troubleshooting errors. | Inspect variables: Inspecting variables involves examining the values of variables in a computer program. This can be useful for understanding how the program is functioning and identifying errors or issues. | . . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path = a (a sequence of directly connected computing devices that begins at the sender and ends at the reciever) | Route = e (process of finding a path from sender to reciever) | Computer System = b (is a group of computing devices and programs working together for a common purpose) | Computer Device = c (a physical artifact that can run a program, like computers, tablets, servers, routers, and smart sensors) | Bandwidth = d (the maximum amount of data that can be sent in a fixed amount of time) | Computer Network = f (a group of interconnected computing devices capable of sending or recieving data) | . | . Watch/review College Board Daily Video 4.1.2 . Complete True or False Questions True | False | False | True | False | False | True | | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . The first one is fault tolerant, but the second two are not. Fault tolerance is basically when something keeps functioning despite errors or disconnection because they are multiple points of connection . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? frontend is client machines and backend is more storage, so servers or cloud . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article specifies command line arguments to give gunicorn application server on launch- workers is sent to 1 so it will only use single worker process . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "csusm extra credit",
            "content": "Took classes in high school and continue them into college | Persist despite bad grades | Chase passion | Even without guidance, persevere because you will eventually be successful | Dont let failures define you | Start off in community college and able to transition to cal state san marcos and still pursue dream career | 6 years to get bachelors degree in compsci | Need to be able to code for every stem field | Very common for people to get internships with local industries | Local industries want to hire fresh graduates | Smaller campus | More room to constantly change and update curriculum for current needs | Can change major halfway through bc classes are in sync so you won’t really fall behind | Lots of events for compsci related things | Lots of clubs as well (robotics, women in stem, etc) | Local industry advocates come to campus for internship meetings, fun events, etc | Opportunities to get paid for internships (avoid unpaid) | Apply even if u are underqualified | Ask faculty members for help (essay editing, proofreading, etc) | Can get full time and part time | On you to get scholarships | You can get one for basically anything | Grant- grade and status do matter (depending on how much money ur parents earn plays a big factor) | Declare yourself independent when you can when you apply for fafsa because it shows you as making less so you can get more back | Two types of loan- subsidized and unsubsidized- try to avoid if you can | Check student emails | Google financial aid opportunities | Possible pay raise when getting masters degree | Fafsa covers six years | shouldnt pay for phd because youre doing research for university | 3k a semester for cal state san marcos . | reflection: i’m already interested in going to cal state san marcos, but this was really helpful for me to understand what i should be looking for in terms of job opportunities and internships and how important it is to do something i’m passionate about. the craft was also fun. overall i thought this was a really meaningful presentation. | .",
            "url": "https://butterflyfish.github.io/butterflyfish/seed/2023/03/31/csusm.html",
            "relUrl": "/seed/2023/03/31/csusm.html",
            "date": " • Mar 31, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "my favorite taylor swift song",
            "content": "i am a very big taylor swift fan. my all time listens for every taylor swift song in MY LIBRARY alone is… . 1312 TIMES . and the amount of taylor swift songs i have in my library is 23, spanning 9 albums (not including the deluxe/other versions) . my favorite song is constantly changing, and although my number one listened to song is look what you made me do (101 times), it’s really difficult for me to choose. if i absolutely had to, id have to say the last great american dynasty . i really like how she connects it to herself after telling the whole story. my favorite lyric is “they say she was seen on occasion, pacing the rocks staring out at the midnight sea. and in a feud with her neighbor, she stole his dog and dyed him key lime green” because it’s obviously funny, but it’s even more funny because it’s a true story and it’s great imagery. . i’d say my overall favorite album is either folklore or midnights, even though midnight has recieved a lot of hate from critics. folklore is sadder than most of her other discography and midnights is more pop oriented, but i feel like they both completely encapsulate her writing talent. .",
            "url": "https://butterflyfish.github.io/butterflyfish/seed/personal/2023/03/29/taylorswift.html",
            "relUrl": "/seed/personal/2023/03/29/taylorswift.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . ? | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): #baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . Do you think this is a time complexity or space complexity or both problem? . ? | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . NameError Traceback (most recent call last) /Users/disvs/vscode/butterflyfish/_notebooks/2023-03-22-DS-space_time_complexity.ipynb Cell 28 in &lt;cell line: 13&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/butterflyfish/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X36sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; high = mid - 1 &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/butterflyfish/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X36sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; target = 263 &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/butterflyfish/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X36sZmlsZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; result = binary_search(numbers, 0, len(numbers) - 1, target) &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/butterflyfish/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X36sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; print(result) NameError: name &#39;numbers&#39; is not defined . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) print(fibonacci(30)) #print(fibonacci(40)) . 832040 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) #print(generate_subsets(numbers)) . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 1.529968023300171 seconds 9227465 Time taken: 2.4437530040740967 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | Why is time and space complexity important when choosing an algorithm? | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? | . Complete the Time and Space Complexity analysis questions linked below. Practice .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/03/22/DS-space_time_complexity.html",
            "relUrl": "/2023/03/22/DS-space_time_complexity.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . The Tri 2 Final Project is an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? it is a layout of the database and its functions . What is the purpose of identity Column in SQL database? the purpose of an identity column in sql database is to make individual unique ids to be able to identify | What is the purpose of a primary key in SQL database? the purpose of a primary key is to be able to access the databse in a specific way with a specific and unique variable | What are the Data Types in SQL table? the data types in an sql table are numeric, date/time, and character string | . import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? represents a unique session with a data source, which I think means that it represents a unique table from one source of data | Same for cursor object?- used to make the connection for executing sql queries, which i think means it is the upon click sort of function | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? yes because it has the attributes of the object and it has data | crud functions are also part of the object IN USER CLASS (oop superiority) | . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? i personally prefer sql in the initial lesson because it is less clunky and just generally more streamlined | Explain purpose of SQL INSERT. Is this the same as User init? the purpose is to insert data into a table, which is different from init because it initializes the data (loads it up) | . recursion- menu function calling it self . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . Explain try/except, when would except occur? except would occur in specific occasions where there is an error to stop a certain command from running | What code seems to be repeated in each of these examples to point, why is it repeated? there is connect and cursor in all of these, which is basically what starts and bonds everything together | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? the user data cannot be recovered once its gone and you might delete more than you wanted to | What is the &quot;f&quot; and {uid} do? the f and uid specifies exactly where and when to send the message and only sends it in specific instances | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? the menu repeats because its not streamlined and it needs to define many functions. it could work much faster with a list to have everything in one place. | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Create a new Table or do something new, sqlite documentation | In implementation in previous bullet, do you see procedural abstraction? | . yes- data abstraction makes it easier for user to both read and use the data, which is why there are functions that make it easier for user to understand even though they may not be the most functional | .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Title",
            "content": "from flask import Flask from flask_sqlalchemy import SQLAlchemy from sqlalchemy.exc import IntegrityError # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . class Snakes(db.Model): __tablename__ = &#39;Snakes&#39; id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _snakescore = db.Column(db.String(255), unique=False, nullable=False) def __init__(self, name, uid, snakescore): self._name = name self._uid = uid self._snakescore = snakescore @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def snakescore(self): return self._snakescore # a setter function, allows name to be updated after initial object creation @snakescore.setter def snakescore(self, snakescore): self._snakescore = snakescore # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;snakescore&quot;: self.snakescore } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, snakescore=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(snakescore) &gt; 0: self.snakescore = snakescore db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initSnakes(): with app.app_context(): db.create_all() s1 = Snakes(name=&#39;sabine&#39;, uid=&#39;sab&#39;, snakescore = 10) s2 = Snakes(name=&#39;xxx&#39;, uid=&#39;xxx&#39;, snakescore = 20) s3 = Snakes(name=&quot;bob&quot;, uid=&quot;bobby&quot;, snakescore=30) s4 = Snakes (name=&quot;test&quot;, uid=&quot;testy&quot;, snakescore = 10) snakes = [s1, s2, s3, s4] for snake in snakes: try: &#39;&#39;&#39;add user/post data to table&#39;&#39;&#39; snake.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Duplicate email, or error: {snake.uid}&quot;) initSnakes() . import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;http://127.0.0.1:4000/butterflyfish/api/snake&quot; fetch = requests.get(url) data = fetch.json() df = pd.DataFrame(data) print(df.loc[:, [&#39;uid&#39;, &#39;snakescore&#39;]]) fetch() .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/03/13/table.html",
            "relUrl": "/2023/03/13/table.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "mcq corrections",
            "content": "Big Idea 2 Quiz . 24/25 . answer: 1001 0100 i picked: 1101 0100 . this was a reading mistake on my part. i didnt see the second 1. when there is a 0, the 1 moves over and the 0 repeats, meaning there would be the two 0s, but it couldnt go far enough to be 1101 because there is a 1 in between. . 41/50 . Anonymous web browsing- I said the activities will not be available for monitors, but the actual answer is that their shopping cart will not be saved. Administrators are seeing the device, not the browser. . | Input data needed by updated system- I said the audio signal and the phone number, but the answer is just the audio signal. . | Algorithm to select two students from thirty- I picked A, but the answer is D. I meant to click D, so i must have misclicked. . | Remove first and last two characters of a string- i only picked one correct answer when there shouldve been two . | values after sequence of boolean expressions- picked c, but the fourth statement makes a false and the fifth makes c false . | modify code to count number of robot moves- i chose b, but that would make the count twice as large as it should be . | why binary search wont work- i picked d, but binary search will work regardless of duplicate elements . | result of call to proc2 procedure- the answer is d because the call to proc1 is first so to you is before happy . | which algorithms run in reasonable time- i chose answer b, but the number of steps is equal to 2n so it doesnt run in reasonable time . | . . .",
            "url": "https://butterflyfish.github.io/butterflyfish/test%20corrections/2023/03/13/MCQ-reflection.html",
            "relUrl": "/test%20corrections/2023/03/13/MCQ-reflection.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object- this is how you can implement the restapi endpoints | SQLAlchemy object- working below! | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose | db.Model inheritance | init method | @property, @.setter&lt;/li&gt; additional methods | &lt;/ul&gt; db.model is a parameter of the user class (taking something from db model is inheriting) | inheriting/taking from a database and using the functions in that db.model to help us build our user class (db.column, db.integer- need to inherit db.model first to be able to use these) | @property = getter, so you have a getter and a setter | can use CRU easier because you have a function you can call to get and update name (the @property and the setter) | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from json import request from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | User Object Constructors | Try / Except | initUsers is the first time the function is actually called, so it stops there first when there is a breakpoint | can use debugging as a process to see the user class functions in action | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) u7 = User(name = &#39;sabine&#39;, uid = &#39;fshpeac&#39;, password = &#39;butterflyfish&#39;) users = [u1, u2, u3, u4, u5, u6, u7] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven Created new uid fshpeac . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password (Object Relational Model) . takes user input like uid and uses query filter (making it search for something) to look for that input to make sure its correct with what you thought it was/ what its meant to be | check credentials calls on that function and checks to see if user has same uid as the input (which is how find by uid works- it calls check_credentials) | nothing happens if the uid is not found, if it is found it does a second check to check and see if the password is the same, it will return true if both are good (two layers of checking) | | Comment on purpose of following . | . User.query.filter_by- filters the request by a specific variable/piece of information | user.password- verifies the input | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False # check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except- do a specific function/find a specific unique value except when there is an error | user = User(...) put a unique uid into the user class | user.dob and try/except try to make unique dob except when error | user.create() and try/except- create a user except when specific error such as it already existing | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all - bring all users to be prepared to be read | json_ready assignment - make sure it is readable for user | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . def update_user(): &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate uid uid = body.get(&#39;uid&#39;) if uid is None or len(uid) &lt; 2: return {&#39;message&#39;: f&#39;User ID is missing, or is less than 2 characters&#39;}, 210 # look for password and dob new_uid = body.get(&#39;uid&#39;) if new_uid is None: return {&#39;message&#39;: f&#39;what are you doing&#39;}, 210 &#39;&#39;&#39; #1: Key code block, lookup USER OBJECT &#39;&#39;&#39; user = User.query.filter_by(uid=uid).first() if user is None: return {&#39;message&#39;: f&#39;User with User ID {uid} not found&#39;}, 210 &#39;&#39;&#39; Additional garbage error checking &#39;&#39;&#39; # set password if provided &#39;&#39;&#39; #2: Key Code block to update user in database &#39;&#39;&#39; # update user in database user.update(uid=new_uid) # success returns json of updated user return jsonify(user.read()) def delete_user(): &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate uid uid = body.get(&#39;uid&#39;) if uid is None or len(uid) &lt; 2: return {&#39;message&#39;: f&#39;User ID is missing, or is less than 2 characters&#39;}, 210 &#39;&#39;&#39; #1: Key code block, lookup USER OBJECT &#39;&#39;&#39; user = User.query.filter_by(uid=uid).first() if user is None: return {&#39;message&#39;: f&#39;sorry! record doesnt exist&#39;} &#39;&#39;&#39; #2: Key Code block to delete user from database &#39;&#39;&#39; # delete user from database db.session.delete(user) db.session.commit() # success message return {&#39;message&#39;: f&#39;successfully deleted user with User ID {uid}&#39;} . &lt;/div&gt; | .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/03/13/AP-unit24a.html",
            "relUrl": "/2023/03/13/AP-unit24a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2.2/2.3 pandas work",
            "content": "from sklearn.datasets import fetch_california_housing import pandas as pd california = fetch_california_housing() df = pd.DataFrame(california.data, columns=california.feature_names) df[&#39;target&#39;] = california.target . import seaborn as sns from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error # Load the dataset from sklearn.datasets import fetch_california_housing import pandas as pd california = fetch_california_housing() df = pd.DataFrame(california.data, columns=california.feature_names) df[&#39;target&#39;] = california.target # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(df.drop(&#39;target&#39;, axis=1), df[&#39;target&#39;], test_size=0.3, random_state=42) # Create the linear regression model reg = LinearRegression() # Train the model on the training set reg.fit(X_train, y_train) # Make predictions on the testing set y_pred = reg.predict(X_test) # Calculate the mean squared error of the model mse = mean_squared_error(y_test, y_pred) print(&#39;Mean Squared Error:&#39;, mse) . Mean Squared Error: 0.5305677824766748 . import seaborn as sns from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score # Load the dataset from sklearn.datasets import fetch_california_housing import pandas as pd california = fetch_california_housing() df = pd.DataFrame(california.data, columns=california.feature_names) df[&#39;target&#39;] = california.target # make sure to define the target (max earnings that the person wants in the area of the house they want to buy) threshold = 2.5 # in units of 100,000 dollars df[&#39;target_binary&#39;] = (df[&#39;target&#39;] &gt;= threshold).astype(int) # split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(df[[&#39;MedInc&#39;, &#39;Population&#39;, &#39;HouseAge&#39;]], df[&#39;target_binary&#39;], test_size=0.3, random_state=42) # create the decision tree classifier model dt = DecisionTreeClassifier() # give the model the training set so it knows what to do dt.fit(X_train, y_train) # use test set to make predictions y_pred = dt.predict(X_test) # find out how accurate it is accuracy = accuracy_score(y_test, y_pred) print(&#39;Accuracy:&#39;, accuracy) # use the model to answer the question (instance) should i buy a house in this area? new_instance = [[1.4, 5000, 20]] # median income, population, house age- ## the median income shows how much people usually make in that area # and when it is below the threshold (aka the budget), it makes sense to buy (as long as the house isnt too old) prediction = dt.predict(new_instance) if prediction == 1: print(&#39;yes buy!&#39;) else: print(&#39;do NOT buy- it is not a good decision!&#39;) response = input(&quot;wanna know why? (yes/no) &quot;) if response == &quot;yes&quot;: print(&quot;this house is either too old, too expensive, or in an overpopulated area.&quot;) else: print(&quot;ok, bye! thanks!&quot;) . /Users/disvs/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names warnings.warn( . Accuracy: 0.7533914728682171 do NOT buy- it is not a good decision! this house is either too old, too expensive, or in an overpopulated area. . BELOW is going to be the information for my pandas dataset! . import seaborn as sns from scipy.stats import mode planets_data = sns.load_dataset(&#39;planets&#39;) print(planets_data.head()) print() print(&quot;--max and min--&quot;) print() print(planets_data[planets_data.mass == planets_data.mass.max()]) print() print(planets_data[planets_data.mass == planets_data.mass.min()]) print() print(&quot;--median--&quot;) print(planets_data[planets_data.mass == planets_data.mass.median()]) print() print(&quot;--mode--&quot;) print() mode_mass = mode(planets_data.mass) print(planets_data[planets_data.mass == mode_mass.mode[0]]) . method number orbital_period mass distance year 0 Radial Velocity 1 269.300 7.10 77.40 2006 1 Radial Velocity 1 874.774 2.21 56.95 2008 2 Radial Velocity 1 763.000 2.60 19.84 2011 3 Radial Velocity 1 326.030 19.40 110.62 2007 4 Radial Velocity 1 516.220 10.50 119.47 2009 --max and min-- method number orbital_period mass distance year 321 Radial Velocity 1 2371.0 25.0 37.05 2008 method number orbital_period mass distance year 46 Radial Velocity 1 3.2357 0.0036 1.35 2012 --median-- method number orbital_period mass distance year 347 Radial Velocity 2 572.40 1.26 35.59 2003 556 Radial Velocity 1 456.46 1.26 52.63 2004 600 Radial Velocity 1 1311.00 1.26 33.29 2002 --mode-- method number orbital_period mass distance year 45 Radial Velocity 1 380.800 1.8 20.21 2010 226 Radial Velocity 1 227.000 1.8 44.15 2002 285 Radial Velocity 1 912.000 1.8 121.07 2011 363 Radial Velocity 3 51.645 1.8 64.56 2003 400 Radial Velocity 1 436.900 1.8 150.38 2011 509 Radial Velocity 1 521.000 1.8 114.15 2011 --mean-- Empty DataFrame Columns: [method, number, orbital_period, mass, distance, year] Index: [] . /var/folders/sv/x_7f_68x4vg6tfvg084_dn400000gp/T/ipykernel_50345/290606554.py:19: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning. mode_mass = mode(planets_data.mass) .",
            "url": "https://butterflyfish.github.io/butterflyfish/pandas/2023/03/12/decisiontree.html",
            "relUrl": "/pandas/2023/03/12/decisiontree.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . see practice problems for what needs to be cleaned here. . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . I think it&#39;s interesting how you can make it ascend and descend but only have to say the ascending = command once in order to get them to be exact opposites. . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . I think this feature could be very useful for something similar to binary search/ some sort of search engine, specifically for cleaning data because you could weed out certain input data more easily out of larger data sets . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . this feature is useful for finding out the high and low points of a dataset which might make it easier to find a middle point, but it could be hard to use for some other points of data if there is unclean data that messes with the results. . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd dict = { &quot;calories&quot;: [420, 380, 390, 300], &quot;duration&quot;: [50, 40, 45, 42] } print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 300 42 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 300 42 . I think it&#39;s cool how you can have the top part seperating the tables and then define what you want them to be indexed by because it is definitely a better way to visualize the data and really understand what you are looking at . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . this could definitely be useful for cleaning data and making sure data in a large database matches with other data and doesn&#39;t need to be removed . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . it&#39;s interesting to me that it is able to return this information within a function of df, although I am not exactly sure when I would see myself utilizing this data. however, the dtype could help with cleaning data. . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . This could definitely be useful for differentiating between top and bottom points of a large data set/ finding the max and min/ just generally seeing how much space there is between the biggest and smallest samples. It&#39;s also just interesting data to consider . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . knowing how to do this could definitely be vital in incorporating 3rd party data into my own pbl project or into other projects that I am working on if I just want a specific data set. For example, I might use this to incorporate a little box for snake facts into my snake game page . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . NameError Traceback (most recent call last) /Users/disvs/vscode/tri2/_notebooks/2023-03-09-AP-unit2-3.ipynb Cell 39 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/tri2/_notebooks/2023-03-09-AP-unit2-3.ipynb#X53sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; from sklearn.metrics import accuracy_score &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/tri2/_notebooks/2023-03-09-AP-unit2-3.ipynb#X53sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; # Split arrays or matrices into random train and test subsets. -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/tri2/_notebooks/2023-03-09-AP-unit2-3.ipynb#X53sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; X = td.drop(&#39;survived&#39;, axis=1) &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/tri2/_notebooks/2023-03-09-AP-unit2-3.ipynb#X53sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; y = td[&#39;survived&#39;] &lt;a href=&#39;vscode-notebook-cell:/Users/disvs/vscode/tri2/_notebooks/2023-03-09-AP-unit2-3.ipynb#X53sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) NameError: name &#39;td&#39; is not defined . practice problems! . The data that needs to be cleaned in this example is the Year in School items &quot;9th Grade&quot; and &quot;Junior&quot; because these do not fit in with the rest of the integer options. The gpa &quot;4&quot; is also an outlier because ever other one has two decimal places, making the &quot;3.9&quot; one also in need of cleaning. There is also a grade 20 option there, which is invalid, and a missing Student ID. 4.75 is also larger than the 4 limit so it could need to be cleaned. | Correlation vs causation: while the data shows a sort of trend between sunglasses and ice cream, in actuality these are two unrelated topics that cannot really have a correlation, meaning the data is initially misleading. | reflection on practice problems: . Compression question 3: I said that lossless gives same size file, but the answer was that lossy gives greater reduction in transmission time, which makes sense because the file is less quality and therefore requires less high level transition and saving of pixels. | Q3 and Q4. For Q3 I selected users might search for multiple cities, but I think I misinterpreted what they meant by that. Obviously they can search for as many cities as they want within the data set. For Q4 I picked an option that was not even being collected by the data set in a moment of weakness. The answer has to be the average ticket price because it can determine the popularity and how much people were willing to pay. |",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab- the different files have different amount of pixels and different makeup so it affects recreation | Size, height and width, number of pixels- the amount of detail effects how effectively they can be recreated and transferred | Visual perception, lossy compression- lossy compression is where you lose more of the quality of the image, but it may be easier to transfer | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? use ls to see the files that you are trying to access and then you can cd into them | What are the command you use in Windows terminal to access files? dir command | What are some of the major differences? the major difference is that windows doesnt give you the full overview of what you are trying to find | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? path is a big deal because it relates to how the code finds the image | How does the meta data source and label relate to Unit 5 topics? it relates to unit five topics because unit 5 is about processing data and source and label relate to where the data comes from | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? this is interesting in jupyter notebooks because it gives interactive shells so its more helpful for the consumer and allows them to work with different syntaxes | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . Base64 is similar to binary and hexidecimal because it uses numbers (binary) and letters (hexidecimal) but what sets it apart is the way that it combines uppercase, lowercase, letters, numbers, and can even include punctuation in specific instances. It also combines what it tries to convert into sets before it converts it. | U0FC is the first three letters of my name (SAB) in base64, via simple base64 converter code | numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . I have been a consumer of buffering in many instances, most notably when I try to watch something and it takes a decent amount of time for the content to load in and begin playing. | The effects that I have experienced include grey screens with loading images, videos that keep pausing or skipping, and error messages saying that the loading has failed. | These effects apply to images because it may take time for them to load in and in the mean time, it may show an error or loading sign or just a grey/blank screen before the pixels are available. | Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? it takes the pixel value for grey and erases the color | Describe scale image? What is before and after on pixels in three images? before and after- it loses data, but more or less retains the general detail | Is scale image a type of compression? If so, line it up with College Board terms described? yes, it is. you scale the image down, meaning that it has to compress the pixels into a smaller space and therefore some of the fine detail is lost | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (251, 253) Scaled size: (320, 322) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . lossy vs lossless: images such as the image of the mountain are more lossy because the high detail makes it harder to convert properly, while a simple green square is more lossless because it is lower definition and simpler to transfer . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . GREENSCALE (numpy pixel manipulation) . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_green = self.image_to_html_green() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_green(self): return self._html_green # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_green(self): img_green = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array green_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ green_value = pixel[1] # Use the green channel value if len(pixel) &gt; 3: green_data.append((0, green_value, 0, pixel[3])) # PNG format else: green_data.append((0, green_value, 0)) # end for loop for pixels img_green.putdata(green_data) return self.image_to_html(img_green) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; green image &quot;) display(HTML(ido.html_green)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (251, 253) Scaled size: (320, 322) -- scaled image -- . green image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . green image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . green image . .",
            "url": "https://butterflyfish.github.io/butterflyfish/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "JavaScript Tutorial",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . . JavaScript and Jupyter references . JavaScript is the most important language you need to learn as a frontend developer. Jupyter Notebooks is a convenient way to learn the language without the overhead of creating a full Website. Jupyter Notebooks had ChatGPT plugins to assist with design and troubleshooting problems. This Notebook has colors on HTML pages that were designed with a dark mode background. . JavaScript / Jupyter General References . W3Schools JS Reference - ChatGPT AI assistant for Chrome/Jupyter | Theme setup for Jupyter Article. Or do these commands from shell... Install pip: pip install jupyterthemes | Revert to original theme: jt -r | List themes: jt -l | Install with Theme, Name, Logo: jt -t onedork -T -N -kl | . | Chrome Dev Tools | . | Coding with jQuery . Jupyter Notebook GitHub, wget: https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2022-09-19-PBL-javascript_tutorial.ipynb | Markdown Fetch example in GitHub project for APCSP | HTML Static example in GitHub project for flask_portfolio | . | . output using HTML and CSS . Multiple cells are used to setup HTML in this lesson. Many of the JavaScript cells will use the output tag(s) to write into the HTML that has been setup. . %%html is used to setup HTML code block | &quot;style&quot; tag enables visuals customization | &quot;div&quot; tag is setup to receive data | . %%html &lt;html&gt; &lt;head&gt; &lt;style&gt; #output { background-color: #353b45; padding: 10px; border: 3px solid #ccc; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;output&quot;&gt; Hello! &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Hello! . output explored . There are several ways to ouput the classic introduction message: &quot;Hello, World!&quot; . Before you go further, open Console on your Browser. JavaScript developer leaves Console open all the time!!! | The function console.log() outputs to Console, this is often used for inspection or debugging. | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. Developer call this a hard coded string. | &quot;Hello, World&quot; literal is a parameter to console.log(), element.txt() and alert(). | The element.txt function is part of Jupyter Notebook %%js magic. This is convenient for Notebook and testing. | The alert command outputs the parameter to a dialog box, so you can see it in this Jupyter notebook. The alert commands are shown, but are commented out as the stop run all execution of the notebook. | Note, in a Web Application Debugging: An alert is often used for less savy Developers. Console is used by more savy developers; console often requires setting up a lot of outputs. Source level debugging is the most powerful solution for debugging and does not require alert or console commands. | . %%js // required to allow cell to be JavaScript enabled console.log(&quot;JavaScript/Jupyter Output Intro&quot;); // Browser Console output; debugging or tracing console.log(&quot;Hello, World!&quot;); console.log(&quot;Hello, World Again!&quot;); // Document Object Model (DOM) output; output to HTML, CSS which is standard for a Web Page // &lt;mark&gt;select element method&lt;/mark&gt;: DOM native JavaScript get, document.getElementByID document.getElementById(&quot;output&quot;).textContent = &quot;Hello, World!&quot;; // &lt;mark&gt;jQuery CSS-style method&lt;/mark&gt;: Tag for DOM selector, $(&#39;#output&#39;) $(&#39;#output&#39;).append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); // br is break or new line, b is bold // Jupyter built in magic element for testing and convenience of development element.text(&quot;Hello, World!&quot;); // element is output option as part of %%js magic element.append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); //alert(&quot;Hello, World!&quot;); . multiple outputs using one variable . This second example is a new sequence of code, two or more lines of code forms a sequence. This example defines a variable, thank goodness!!! In the previous example we were typing the string &quot;Hello, World&quot; over and over. Observe with the variable msg=&quot;Hello, World!&quot;; we type the string once and now use msg over and over. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console, be sure to Inspect it! | The element.text() is part of Jupyter Notebooks and displays as output blow the code on this page. Until we build up some more interesting data for Web Site, we will not use be using the Python HTML, CSS technique. | The alert(msg) works the same as previous, but as the other commands uses msg as parameter. | . %%js console.log(&quot;Variable Definition&quot;); var msg = &quot;Hello, World!&quot;; // Use msg to output code to Console and Jupyter Notebook console.log(msg); //right click browser select Inspect, then select Console to view element.text(msg); //alert(msg); . output showing use of a function . This example passes the defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are multiple steps in this code.. The &quot;definition of the function&quot;: &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. Passing a parameter is required when you call this function. | The &quot;call to the function:&quot;logIt(msg)&quot; is the call to the function, this actually runs the function. The variable &quot;msg&quot; is used a parameter when calling the logIt function. | . | Showing reuse of function... There are two calls to the logIt function | This is called Prodedural Abstraction, a term that means reusing the same code | . | . %%js console.log(&quot;Function Definition&quot;); /* Function: logIt * Parameter: output * Description: The parameter is &quot;output&quot; to console and jupyter page */ function logIt(output) { console.log(output); element.append(output + &quot;&lt;br&gt;&quot;); //alert(output); } // First sequence calling logIt function var msg = &quot;Hello, World!&quot;; logIt(msg); // Second sequence calling logIt function var msg = &quot;Hello, &lt;b&gt;Students&lt;/b&gt;!&quot; // replaces content of variable var classOf = &quot;Welcome CS class of 2023-2024.&quot; logIt(msg + &quot; &quot; + classOf); // concatenation of strings . output showing Loosely typed data . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. . To define a variable you prefix the name with var or const. The variable type is determined by JavaScript at runtime. | Python and many interpretive languages are loosely typed like JavaScript. This is considered programmer friendly. | Java which is a compiled language is strongly typed, thus you will see terms like String, Integer, Double, and Object in the source code. | In JavaScript, the typeof keyword returns the type of the variable. Become familiar with type as it is valuable in conversation and knowing type help you understand how to modify data. Each variable type will have built in methods to manage content within the data type. | . %%js console.log(&quot;Examine Data Types&quot;); // Function to add typeof to output function getType(output) { return typeof output + &quot;: &quot; + output; } // Function defintion function logIt(output) { console.log(getType(output)); // logs string console.info(output); // logs object element.append(getType(output) + &quot;&lt;br&gt;&quot;); // adds to Jupyter output //alert(getType(output)); } // Common Types element.append(&quot;Common Types &lt;br&gt;&quot;); logIt(&quot;Mr M&quot;); // String logIt(1997); // Number logIt(true); // Boolean element.append(&quot;&lt;br&gt;&quot;); // Object Type, this definition is often called a array or list element.append(&quot;Object Type, array &lt;br&gt;&quot;); var scores = [ 90, 80, 100 ]; logIt(scores); element.append(&quot;&lt;br&gt;&quot;); // Complex Object, this definition is often called hash, map, hashmap, or dictionary element.append(&quot;Object Type, hash or dictionary &lt;br&gt;&quot;); var person = { // key:value pairs seperated by comma &quot;name&quot;: &quot;Mr M&quot;, &quot;role&quot;: &quot;Teacher&quot; }; logIt(person); logIt(JSON.stringify(person)); //method used to convert this object into readable format . Build a Person object and JSON . JavaScript and other languages have special properties and syntax to store and represent data. In fact, a class in JavaScript is a special function. . Definition of class allows for a collection of data, the &quot;class Person&quot; allows programmer to retain name, github id, and class of a Person. | Instance of a class, the &quot;const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; makes an object &quot;teacher&quot; which is an object representation of &quot;class Person&quot;. | Setting and Getting properties After creating teacher and student objects, observe that properties can be changed/muted or extracted/accessed. | . %%html &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;html&gt; &lt;head&gt; &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; /* CSS-style selector maps to table id or other id&#39;s in HTML */ #jsonTable, #flaskTable { background-color: #353b45; padding: 10px; border: 3px solid #ccc; box-shadow: 0.8em 0.4em 0.4em grey; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Table for writing and extracting jsonText --&gt; &lt;table id=&quot;jsonTable&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Classroom JSON Data&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td id=&quot;jsonText&quot;&gt;{&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . . Classroom JSON Data . {&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]} | . . %%js console.log(&quot;Person objects&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: role uses a default property, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person object in JSON &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } // make a new Person Object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // update role to Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.logIt(); // log to console // make a new Person Object const student = new Person(&quot;Jane Doe&quot;, &quot;jane&quot;, 2007); // object type is easy to work with in JavaScript student.logIt(); // log to console . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . %%js console.log(&quot;Classroom object&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: this.role is a default property retained in object, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } /* class: Classroom * Description: A collection of Person objects */ class Classroom { /* method: constructor * parameters: teacher - a Person object, students - an array of Person objects * description: returns object when &quot;new Classroom()&quot; is called containing properties and methods of a Classroom * assignment: this.classroom, this.teacher, ... are properties retained in the returned object */ constructor(teacher, students) { /* spread: this.classroom contains Teacher object and all Student objects * map: this.json contains of map of all persons to JSON */ this.teacher = teacher; this.students = students; this.classroom = [teacher, ...students]; // ... spread option this.json = &#39;{&quot;classroom&quot;:[&#39; + this.classroom.map(person =&gt; person.getJSON()) + &#39;]}&#39;; } /* method: logIT * description: &quot;this&quot; Classroom object is logged to console */ logIt() { //Classroom object console.log(this); //Classroom json element.append(&quot;Classroom object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); //alert(this.json); } } /* function: constructCompSciClassroom * Description: Create data for Classroom and Person objects * Returns: A Classroom Object */ function constructCompSciClassroom() { // define a Teacher object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Teacher&quot;); // optional 4th parameter // define a student Array of Person objects const students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;VidhiKulkarni&quot;, 2024) ]; // make a CompSci classroom from formerly defined teacher and student objects return new Classroom(teacher, students); // returns object } // assigns &quot;compsci&quot; to the object returned by &quot;constructCompSciClassroom()&quot; function const compsci = constructCompSciClassroom(); // output of Objects and JSON in CompSci classroom compsci.logIt(); // enable sharing of data across jupyter cells $(&#39;#jsonText&#39;).text(compsci.json); // posts/embeds/writes compsci.json to HTML DOM element called jsonText . for loop to generate Table Rows in HTML output . This code extracts JSON text from HTML, that was placed in DOM in an earlier JavaScript cell, then it parses text into a JavaScript object. In addition, there is a for loop that iterates over the extracted object generating formated rows and columns in an HTML table. . Table generation is broken into parts... table data is obtained from a classroom array inside of the extracted object. | the JavaScript for loop allows the construction of a new row of data for each Person hash object inside of the the Array. | in the loop a table row &lt;tr&gt; ... &lt;/tr&gt; is created for each Hash object in the Array. | in the loop table data, a table column, &lt;td&gt; ... &lt;/td&gt; is created for name, ghID, classOf, and role within the Hash object. | . | . %%js console.log(&quot;Classroom Web Page&quot;); // extract JSON text from HTML page const jsonText = document.getElementById(&quot;jsonText&quot;).innerHTML; console.log(jsonText); element.append(&quot;Raw jsonText element embedded in HTML&lt;br&gt;&quot;); element.append( jsonText + &quot;&lt;br&gt;&quot;); // convert JSON text to Object const classroom = JSON.parse(jsonText).classroom; console.log(classroom); // from classroom object creates rows and columns in HTML table element.append(&quot;&lt;br&gt;Formatted data sample from jsonText &lt;br&gt;&quot;); for (var row of classroom) { element.append(row.ghID + &quot; &quot; + row.name + &#39;&lt;br&gt;&#39;); // tr for each row, a new line $(&#39;#classroom&#39;).append(&#39;&lt;tr&gt;&#39;) // td for each column of data $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.ghID + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.classOf + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.role + &#39;&lt;/td&gt;&#39;) // tr to end row $(&#39;#classroom&#39;).append(&#39;&lt;/tr&gt;&#39;); } . %%html &lt;head&gt; &lt;!-- load jQuery and DataTables syle and scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;table id=&quot;flaskTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;flaskHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;DOB&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;flaskBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;script&gt; $(document).ready(function() { fetch(&#39;https://flask.nighthawkcodingsociety.com/api/users/&#39;, { mode: &#39;cors&#39; }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;API response failed&#39;); } return response.json(); }) .then(data =&gt; { for (const row of data) { // BUG warning/resolution - DataTable requires row to be single append $(&#39;#flaskBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + row.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.dob + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.age + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } // BUG warning - Jupyter does not show Datatable controls, works on deployed GitHub pages $(&quot;#flaskTable&quot;).DataTable(); }) .catch(error =&gt; { console.error(&#39;Error:&#39;, error); }); }); &lt;/script&gt; . . ID Name DOB Age . Hacks . One key to these hacks is to build confidence with me going into final grade, I would like to see each student adapt this frontend work in their final project. Second key is the finished work can serve as review for the course, notes for the future in relationship to frontend. . Adapt this tutorial to your own work | Consider what you need to work on to be stronger developer | Show something creative or unique, no cloning | Be ready to talk to Teacher for 5 to 10 minutes. Individually!!! | Show in Jupyter Notebook during discussion, show Theme and ChatGPT | Have a runtime final in GithHub Pages (or Fastpage) | .",
            "url": "https://butterflyfish.github.io/butterflyfish/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 19, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": ". Unit 7: Trimester 3 Data Structures . Trimester 3 is taught following college course requirements for CS113 Data Structures. Topics, using Python, include searching, sorting, hashing, algorithms, analysis, object-oriented design, collections, lists, stacks, queues, trees, sets, dictionaries, and graphs. These weeks will also include the a focus on preparations for the May 2nd Create Performance Task and the May 8th Exam. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 25 | | - Unit 2.3 Extracting Information from Data, Pandas - Unit 2.2 Data Compression, Images | | | . 26 | | - Unit 2.4b Using Programs with Data, SQL - Unit 2.4a Using Programs with Data, SQLAlchemy | | | . 27 | | | - Data Structures- Space and Time Complexity | | . 28 | | | | | . 29 | | - Computers and Networks (Unit 4) | | | . 30 | | | | | . . Unit 1: Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 0 | | - Unit 2.2/2.3 pandas work | | | . 1 | | | | | . 2 | | | | | . 3 | | | | | . . Unit 2: Introduction to Web Development . Websites are made up of several key parts: Frontend, Backend, Data and Deployment. The focus for these weeks is to enable students to perform the aspects of constructing and deploying a simple Website. Fastpages got us started on these concepts, but now we will start building a Website from the ground up. Once again, there will be a lot of learning focused tools and getting things working. But, by the end of the Unit, students will be ready to start many of the technical coding aspects of Web Development, having established a Deployed Website. On Nov 3rd our Trimester work will end with a project and student participation in Electives Department “Night at the Museum” (N@tM). . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 4 | | | | | . 5 | | | - Frontend | | . 6 | | | | | . 7 | | | - fshpeac | | . . Unit 3: N@tM Project, Web, Systems, and Data . The beginning of Trimester 2 is focussed on Algorithms and Coding. Student need to build their own portfolio. That portfolio should focus on their interests in Python and JavaScript programming. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 8 | | | | | . 9 | | | | | . 10 | | | | | . 11 | | | | | . 12 | | | | | . . Unit 4: Algorithmic Programming . Trimester 2 begins with student teaching and a focus on algorithms. Each week a “Student Team” has a teaching assignment supported by College Board materials. Additionally, the Teacher is providing Career Tech mini-labs that correspond to one or more topics for the week. Use the two things together as you improve your learning experience, Frontend blog and Jupyter Notebooks. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 13 | | | | | . 14 | | | | | . 15 | | | | | . 16 | | | | | . . Unit 5: Intro to OOP, Databases, and Backend Programming . Trimester 2 continues with student learning OOP and immediately applying it to Databases. Each week a “Student Teams” will be working on frontend and backend elements for their Create Performance Task (CPT). GitHub pages will be focus of instruction for frontend, OOP in Python will be instruction provided to create a database which will help exceed every CPT requirement. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 17 | | | | | . 18 | | | | | . 19 | | | | | . 20 | | | | | . . Unit 6: Trimester 2 N@tM and finish CPT . Trimester 2 concludes with student presenting their CPT project at N@tM. Each person within “Student Teams” will have their own specialty within the student project that satisfied all their Create Performance Task requirements. Student should be able to talk about design, coding, and present features of their portion of the system. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 21 | | | | | . 22 | | | | | . 23 | | | | | . 24 | | | | | . . Unit 8: Trimester 3 AP Weeks . Trimester 3 contains AP weeks, where activities will be focused on supporting students in test preparations. Day before a test can be used to study for exam in another class. Days that are not focused on test preparation will be focused on planning for year end project/portfolio. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 31 | | | | | . 32 | | | | | . 33 | | | - JavaScript Tutorial | | . . Unit 9: Trimester 3 Data Structures (continued) . Trimester 3 finishes with a focus on presenting accomplishments for the year at the year end Night at the Museum. These last 2 to 3 weeks will serve as the year end final exam. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 34 | | | - Python 2D Iteration | | . 35 | | | | | . 36 | | | | | .",
          "url": "https://butterflyfish.github.io/butterflyfish/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Frontend",
          "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . sabine (butterflyfish) overview . . welcome to my blog . heres an overview of me. i like coding . | i like backend specifically . | i like fashion . | my name is sabine. surprise. | . . . Code on this blog . This will be all of my homework and classwork for the year (specifically tri 3 data abstractions) . the “ap” tag means its an ap classroom notebook/message | “additional” means it adds on to one of these lessons | “extra” or “personal” is just work i am doing for myself | “recurring” means it is something such as mcq or n@tm reflection that we do more than once | “notes” are just class or EC notes that didn’t fit into another category | .",
          "url": "https://butterflyfish.github.io/butterflyfish/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "fshpeac",
          "content": "| Overview | Covid19 RapidAPI | Jokes API | Users Database | User Login | . fshpeac flop era .",
          "url": "https://butterflyfish.github.io/butterflyfish/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  

  

  

  
      ,"page6": {
          "title": "about",
          "content": "my name is sabine. im a junior and hoping to do coding as a career. i like analog horror, music, and murder mysteries plus art and medical shows. :3 .",
          "url": "https://butterflyfish.github.io/butterflyfish/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page8": {
          "title": "",
          "content": "yippee . Posts .",
          "url": "https://butterflyfish.github.io/butterflyfish/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page14": {
          "title": "",
          "content": "yippee . Posts .",
          "url": "https://butterflyfish.github.io/butterflyfish/page2/",
          "relUrl": "/page2/",
          "date": ""
      }
      
  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://butterflyfish.github.io/butterflyfish/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}